{"version":3,"sources":["reportWebVitals.ts","components/Inputs/FormInputs.tsx","api/agent.ts","stores/activityStore.ts","models/CampaignModel.ts","stores/campaignStore.ts","stores/channelStore.ts","stores/commonStore.ts","models/ContactModel.ts","stores/contactStore.ts","stores/menuStore.ts","stores/modalStore.ts","stores/taskStore.ts","models/User.ts","stores/userStore.ts","stores/store.ts","modules/Users/LoginForm.tsx","modules/Home/LoginPage.tsx","components/Notifications/TaskNotificationProvider.tsx","components/Loader/LoaderComponent.tsx","modules/Activity/Dashboard/ActivityList.tsx","components/Modals/ModalContainer.tsx","modules/Activity/Modal/ActivityListModal.tsx","modules/Activity/Dashboard/ContentBlock.tsx","components/Layouts/Page.tsx","util/helper.ts","modules/Activity/Dashboard/ActivityDashboard.tsx","components/Modals/ModalAlert.tsx","components/DataTables/DataTable.tsx","modules/Campaign/CampaignList.tsx","components/Inputs/DateInput.tsx","modules/Campaign/CampaignModal.tsx","modules/Campaign/CampaignScoreboard.tsx","modules/Campaign/CampaignDashboard.tsx","modules/Contacts/ContactList.tsx","modules/Contacts/ImportModal.tsx","modules/Contacts/ContactDashboard.tsx","modules/Contacts/ContactEntry.tsx","modules/NotFound/PageNotFound.tsx","models/ChannelModel.ts","modules/Settings/SettingModal.tsx","modules/Settings/SettingDashboard.tsx","modules/Task/TaskList.tsx","modules/Task/TaskModal.tsx","modules/Task/TaskDashboard.tsx","modules/Task/Components/TaskNote.tsx","modules/Task/Components/TodoBoard.tsx","modules/Task/AddTaskForm.tsx","modules/Task/TaskDistribution.tsx","modules/Users/UserFormModal.tsx","modules/Users/UserList.tsx","modules/Users/UserDashboard.tsx","components/Notifications/TaskNotification.tsx","layout/Navbar.tsx","layout/PrivateRoute.tsx","layout/SidebarNav.tsx","components/Inputs/RichEditor.tsx","modules/Activity/Forms/EmailForm.tsx","modules/Activity/Forms/FacebookForm.tsx","modules/Activity/Forms/SMSForm.tsx","modules/Activity/Forms/WebPostForm.tsx","modules/Activity/Forms/ActivityForm.tsx","modules/Users/UserProfile.tsx","layout/AdminRoute.tsx","layout/Admin.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FormikTextField","props","useField","name","field","meta","Form","Field","error","touched","className","holderClassName","style","paddingTop","paddingBottom","hasNoLabel","label","Label","basic","color","FormikUploadField","type","onChange","FormikSelect","helper","value","setValue","event","currentTarget","onSelectValueChange","id","options","map","item","index","v","toString","selected","text","FormikPlainTextArea","axios","defaults","baseURL","process","sleep","delay","Promise","resolve","setTimeout","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","data","status","errors","modalStateErrors","key","push","flat","toast","setServerError","message","statusCode","details","userStore","logout","history","responseBody","url","get","body","post","put","delete","agent","EpCampaign","list","detail","create","campaign","edit","segment","ContactsEndPoint","contactForm","find","update","import","formData","ActivityEndPoint","sendSMS","smsForm","sendEmail","emailForm","postWeb","webForm","postSocial","socialForm","initialize","replay","TaskEndPoint","fetchAll","fetchDetail","taskId","task","createUpdateSubTask","UserEndPoint","current","getUserProfile","login","register","readNotification","notification","all","ChannelEndPoint","fetchSingle","createUpdate","channel","ActivityStore","_loading","_default","groups","templates","runInAction","deleteActivity","sendEmailAsync","sendSMSAsync","postSocialasync","console","log","postWebAsync","FormData","append","campaignId","title","undefined","coverImageFile","dateToSend","toDateString","to","initial","getTemplateValue","itemValue","forEach","makeAutoObservable","this","ActivityModel","description","group","Date","isRecurrent","days","subject","toGroup","toCC","toBcc","CampaignModel","init","dateFrom","dateTo","activities","now","Object","assign","CampaignFormValue","CampaignStore","_collection","_selectedCampaign","_sentiment","loadAsync","collection","fetchSingleAsync","setCampaign","saveAsync","newCampaign","updateAsync","deleteAsync","campaigns","filter","getSentimentAsync","sentiment","act","ChannelStore","_channels","fetchAllAsync","channels","setChannels","isPlural","CommonStore","_token","window","localStorage","getItem","appLoaded","setToken","setAppLoaded","reaction","setItem","removeItem","ContactFormValue","firstName","middleName","lastName","fullName","emailAddress","mobileNo","gender","primaryContact","groupTag","location","ContactStore","_contactRegistry","Map","_contacts","_contact","_formTrigger","fetchContactsAsync","callback","contacts","contact","setContact","findContactAsync","fileUpload","file","saveContactAsync","updateContactAsync","afterSubmit","createNew","setFormTrigger","set","MenuCollection","link","enabled","icon","MenuStore","user","redirect","roles","_menuNav","nav","role","ModalStore","_modal","isOpen","onTriggerListener","open","close","setOnNotifyListener","modal","notifyEvent","TaskStore","_tasks","_taskSelected","_taskPerUser","_users","setLoading","tasks","setTask","createTaskAsync","fetchTaskAsync","subTasks","length","subtask","assignedTo","addSubTask","newSubTask","newTask","updateSubTask","subTaskId","subTask","markDelete","toggle","UserProfileModel","username","displayName","jobTitle","email","password","department","notifications","UserModel","UserStore","_user","creds","setUser","fetchCurrent","registerUserAsync","updateNotification","hasRead","createdAt","userId","fetchUsersAsync","users","fetchProfileAsync","result","fetchAllUserAsync","modalStore","campaignStore","contactStore","taskStore","activityStore","menuStore","channelStore","StoreContext","createContext","useStore","useContext","observer","useHistory","useEffect","isLoggedIn","useDefaultAccess","initialValues","onSubmit","values","setErrors","resp","catch","handleSubmit","isSubmitting","autoComplete","Header","content","textAlign","placeholder","render","marginBottom","Button","loading","positive","fluid","LoginPage","Helmet","Container","width","Image","centered","src","size","Card","Content","TaskNotificationContext","React","TaskNotificationProvider","children","useState","notified","setNotified","notify","Provider","useTaskNotificationContext","context","Error","LoaderComponent","inverted","Dimmer","active","Loader","ActivityList","Table","celled","padded","Body","activity","Row","Cell","as","subheader","onClick","clickReplay","clickDelete","ModalContext","ModalForm","modalSize","action","useModal","setIsOpen","Modal","ModalProvider","isOpenModal","setAction","openModal","target","closeModal","activityTypes","Icon","notifyOnClick","image","Subheader","feedbacks","day","ContentBlock","Feed","feedback","Event","Summary","Page","Segment","ownerWidth","childWidth","restProps","enumModalType","useParams","Group","Grid","Column","confirm","ModalAlert","clickCancelButton","clickOkButton","negative","DataTable","Input","circular","onInputChange","columns","column","HeaderCell","Text","toDateFormat","moment","format","convertToTitleCase","sentence","toLowerCase","split","i","toUpperCase","slice","join","viewClick","deleteClick","editClick","setCampaigns","indexOf","OnInputChangeHandler","DateInput","helpers","handleChanged","handleCancel","campaignSingle","dirty","marginTop","placeholderText","dateFormat","disabled","CHeader","styled","div","CBody","CampaignScoreBoard","totalSMSActivities","totalEmailActivities","totalSocialPost","totalEcommerce","setCampaignId","onEditClick","onRemoveClick","contactData","setContactData","rounded","Item","onSuccess","setFieldValue","e","files","getLoading","getContacts","handleTransaction","titleOptions","genderOptions","ContactEntry","contactEntry","setContactEntry","handleClose","padding","enableReinitialize","handleSave","isValid","PageNotFound","Inline","Link","primary","ChannelModel","baseUrl","apiKey","apiSecretKey","header","host","port","userName","phoneNo","SettingModal","onChanges","setChannel","handleChange","useCallback","Meta","Description","onEditHandler","onEdit","taskList","setTaskList","totalSubTaskCount","onChanged","taskModel","onButtonAddDisabled","NoteContainer","NoteBody","NoteFooter","TaskNoteStyled","noteId","assignedBy","isReassignActionEnabled","isDeleteActionEnabled","reAssignCallback","deleteCallback","draggable","onDragStart","dataTransfer","setData","dragStartHandler","TodoBoard","tag","useLoading","dropZone","useRef","ref","onDragOver","preventDefault","onDrop","targetId","getData","onItemDrop","panelColor","floated","minHeight","sub","AddTaskForm","userOptions","setUserOptions","rows","setSubTask","handleUpdateTask","refresh","handleDeleteTask","reAssigned","showButton","roleOptions","UserFormModal","onCancel","userData","submitHandler","onRemove","userCollection","setUserCollection","onInputChangeHandler","NWrapper","NHeader","NCount","NList","NUList","ul","NUListItem","li","NListBody","onListClick","setNotifications","showStyle","setShowStyle","avatar","display","onButtonSidebarClick","Menu","fixed","zIndex","position","spaced","Dropdown","pointing","PrivateRoute","Component","component","rest","currentActive","menuNav","menuId","RichEditor","draft","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","EditorState","createWithContent","prepareDraft","createEmpty","editorState","setEditorState","wrapperClassName","editorClassName","onEditorStateChange","forFormik","draftToHtml","convertToRaw","getCurrentContent","EmailForm","default","activityValue","setValues","height","val","templateHtml","showSentiment","setShowSentiment","setSentiment","useMemo","defaultGroups","newGroups","populateGroups","defaultTemplates","newTemplates","populateTemplates","handleBlur","trim","objValue","word","onBlur","vertical","alignItems","flexDirection","gap","margin","Progress","percent","score","success","sectionOptions","obType","typeObject","userProfile","setUserProfile","href","setToggle","finally","path","ContactDashboard","exact","CampaignDashboard","ActivityDashboard","ActivityForm","TaskDashboard","TaskDistribution","SettingDashboard","UserDashboard","UserProfile","Admin","AdminRoute","createBrowserHistory","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.56f1afe2.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useField } from \"formik\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport { DropdownItemProps, Form, Label } from \"semantic-ui-react\"\r\n\r\n\r\ninterface General {\r\n    placeholder?: string,\r\n    name: string,\r\n    label?: string,\r\n    className?: string,\r\n    holderClassName?: string,\r\n    style?: {},\r\n    hasNoLabel?: boolean\r\n}\r\n\r\ninterface IInputFormik extends General {\r\n    type?: string,\r\n    value?: string,\r\n    onChange? :  (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport const FormikTextField = (props: IInputFormik) => {\r\n    const [field,meta] = useField(props.name);\r\n    \r\n    return(\r\n        <Form.Field \r\n            error={meta.touched && !!meta.error} \r\n            className={props.holderClassName} \r\n            style={{paddingTop: \"5px\", paddingBottom: \"5px\"}}>\r\n            \r\n            {!props.hasNoLabel &&\r\n                <label>{props.label}</label>\r\n            }\r\n            <input  {...field} {...props} />\r\n            \r\n            {meta.touched && meta.error ? (<Label basic color='red'>{meta.error}</Label>) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\nexport const FormikUploadField = (props: IInputFormik) => {\r\n    const [field,meta] = useField(props.name);\r\n    \r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error} className={props.holderClassName} style={{paddingTop: \"5px\", paddingBottom: \"5px\"}}>\r\n            {!props.hasNoLabel &&\r\n                <label>{props.label}</label>\r\n            }\r\n            <input  name={props.name} type=\"file\" onChange={props.onChange} />\r\n            {meta.touched && meta.error ? (<Label basic color='red'>{meta.error}</Label>) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\n\r\ninterface SelectItem extends General {\r\n    options:  DropdownItemProps[],\r\n    onSelectValueChange?: (value : string) => void\r\n}\r\n\r\nexport const FormikSelect = (props: SelectItem) => {\r\n\r\n    const [field,meta,helper] = useField(props.name);\r\n    const {value} = meta;\r\n    const {setValue} = helper;\r\n\r\n    const isSelected  = (v : string) => (v === value ? true : false);\r\n    \r\n    function handleChangeEvent(event: React.ChangeEvent<HTMLSelectElement>) {\r\n        setValue(event.currentTarget.value);\r\n        if(props.onSelectValueChange)\r\n            props.onSelectValueChange(event.currentTarget.value);\r\n    }\r\n\r\n    \r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <select onChange={handleChangeEvent} name={props.name} className={props.className} id={props.name}>\r\n                <option value=\"\">--Select Value--</option>\r\n                {props.options && props.options.map((item,index) => (<option key={index} value={item.value?.toString()} selected={isSelected(item.value!.toString())} >{item.text}</option>))}\r\n            </select>\r\n            {meta.touched && meta.error ? (<Label basic color='red'>{meta.error}</Label>) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n\r\n\r\ninterface PropsTextArea extends General {\r\n    rows?: number;\r\n   \r\n    value?: string | undefined\r\n\r\n}\r\n\r\nexport const FormikPlainTextArea = (props: PropsTextArea ) => {\r\n    const [field,meta] = useField(props.name);\r\n    \r\n    return(\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n        <label>{props.label}</label>\r\n        <textarea  {...field} {...props}>{field.value}</textarea>\r\n        {meta.touched && meta.error ? (<Label basic color='red'>{meta.error}</Label>) : null}\r\n    </Form.Field>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import axios, {AxiosError, AxiosResponse} from \"axios\";\r\nimport { history } from \"..\";\r\nimport { CampaignFormValue, CampaignModel, IActivity, ICampaignCollection, ICampaignModel, IInitialValue } from \"../models/CampaignModel\";\r\nimport { IContactModel } from \"../models/ContactModel\";\r\nimport { ITaskModel } from \"../models/TaskModel\";\r\nimport { ILogin, IRegister, IUser } from \"../models/User\";\r\nimport { store } from \"../stores/store\";\r\nimport { IChannel } from \"../models/ChannelModel\";\r\nimport { toast } from \"react-toast\";\r\nimport { INotification } from \"../models/NotificationModel\";\r\nimport { ISentimentModel, ISentimentRequest } from \"../models/SentimentModel\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.interceptors.request.use(config => {\r\n    \r\n    const token = store.commonStore.token;\r\n    if(token) config.headers!.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    await sleep(1000);\r\n    \r\n    return response;\r\n\r\n}, (error: AxiosError<any,any>) => {\r\n\r\n    const {data,headers, status} = error.response!;\r\n    \r\n    switch(status) {\r\n        case 400:\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } \r\n            else {\r\n                toast.error(data);\r\n            }\r\n\r\n            store.commonStore.setServerError({\r\n                message: data,\r\n                statusCode: status,\r\n                details: \"\"\r\n            });\r\n            break;\r\n        case 401:\r\n            if (status === 401 ) {\r\n                store.userStore.logout();\r\n                history.push('/');\r\n            }\r\n            break;\r\n    }\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get : <T>(url : string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst EpCampaign = {\r\n    list : () => request.get<ICampaignCollection>('/campaign'),\r\n    detail: (id : string ) => request.get<CampaignModel>(`/campaign/${id}`),\r\n    create: (campaign : CampaignFormValue) => request.post<ICampaignModel>('/campaign/create', campaign),\r\n    edit: (campaign: CampaignFormValue) => request.put('/campaign/edit', campaign),\r\n    delete: (id:string) => request.del(`/campaign/${id}`),\r\n    segment: (text:ISentimentRequest) => request.post<ISentimentModel>('/campaign/sentiment',text)  \r\n}\r\n\r\nconst ContactsEndPoint = {\r\n    list : () => request.get<IContactModel[]>('/contacts'),\r\n    create: (contactForm : IContactModel) => request.post('/contacts/create',contactForm),\r\n    find: (id : string) => request.get<IContactModel>(`/contacts/${id}`),\r\n    update: (contactForm : IContactModel) => request.put('/contacts',contactForm),\r\n    delete: (id: string) => request.del(`/contacts/delete/${id}`),\r\n    import: (formData: FormData) => request.post(`/contacts/import`,formData)\r\n}\r\n\r\nconst ActivityEndPoint = {\r\n    sendSMS: (smsForm: IActivity) => request.post('/activity/sms',smsForm),\r\n    sendEmail: (emailForm: IActivity) => request.post('/activity/email',emailForm),\r\n    postWeb: (webForm: FormData) => request.post('/activity/web',webForm),\r\n    postSocial: (socialForm: IActivity) => request.post('/activity/social',socialForm),\r\n    initialize: (type: string) => request.get<IInitialValue>(`/activity/initial/${type}`),\r\n    replay: (id: string) => request.get(`/activity/replay/${id}`),\r\n    delete: (id: string) => request.del(`/activity/${id}`),\r\n}\r\n\r\nconst UserEndPoint = {\r\n    current: () => request.get<IUser>('/account/user'),\r\n    getUserProfile: () => request.get<IUser>('/account/profile'),\r\n    login: (login: ILogin) => request.post<IUser>('/account/login',login),\r\n    register: (register: IRegister) => request.post<IUser>('/account/register',register),\r\n    update: (register: IRegister) => request.put('/account/update',register),\r\n    readNotification: (notification: INotification) => request.put('/account/notification',notification),\r\n    all: () => request.get<IUser[]>('/account')\r\n}\r\n\r\nconst TaskEndPoint = {\r\n    fetchAll: () => request.get<ITaskModel[]>('/task'),\r\n    fetchDetail: (taskId:string) => request.get<ITaskModel>(`/task/${taskId}`),\r\n    create: (task:ITaskModel) => request.post('/task/create',task),\r\n    createUpdateSubTask: (task:ITaskModel) => request.post('/task/update',task) \r\n}\r\n\r\nconst ChannelEndPoint = {\r\n    fetchAll: () => request.get<IChannel[]>('/channel'),\r\n    fetchSingle: (id: string) => request.get<IChannel>(`/channel/${id}`),\r\n    createUpdate: (channel: IChannel) => request.post('/channel',channel),\r\n}\r\n\r\nconst NotificationEP = {\r\n    fetchAll: () => request.get<INotification[]>('/notification'),\r\n    update: (notificationId: string) => request.put('/notification',notificationId)\r\n}\r\n\r\nconst agent = {\r\n    EpCampaign,\r\n    ContactsEndPoint,\r\n    ActivityEndPoint,\r\n    TaskEndPoint,\r\n    UserEndPoint,\r\n    ChannelEndPoint\r\n};\r\n\r\nexport default agent;","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toast\";\r\n\r\nimport agent from \"../api/agent\";\r\nimport { IActivity, IInitialValue, ISMSForm, ITemplates } from \"../models/CampaignModel\";\r\n\r\n\r\nexport default class ActivityStore {\r\n   \r\n\r\n    _loading : boolean = false;\r\n    _default : IInitialValue =  {\r\n        groups : [],\r\n        templates : [] \r\n    };\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get loading() {\r\n        return this._loading;\r\n    }\r\n\r\n    get default() {\r\n        return this._default;\r\n    }\r\n\r\n    replay = async (id: string) => {\r\n        try {\r\n            this._loading = false;\r\n            this._loading = true;\r\n            await agent.ActivityEndPoint.replay(id);\r\n    \r\n            runInAction(() => {\r\n                this._loading = false;\r\n                toast(\"Successfully save\")\r\n            })\r\n        } \r\n        catch(error) {\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        try {\r\n           \r\n            this._loading = true;\r\n            await agent.ActivityEndPoint.delete(id);\r\n    \r\n            runInAction(() => {\r\n                this._loading = false;\r\n                toast(\"Successfully deleted\")\r\n            })\r\n        }\r\n        catch(error) {\r\n            toast(`Error occured ${error}`);\r\n        }\r\n    }\r\n\r\n    sendEmailAsync = async (emailForm: IActivity) => {\r\n\r\n        this._loading = true;\r\n        await agent.ActivityEndPoint.sendEmail(emailForm);\r\n        \r\n        runInAction(() => {\r\n            this._loading = false;\r\n            toast(\"Successfully save\")\r\n        })\r\n    }\r\n\r\n    sendSMSAsync = async (smsForm: IActivity) => {\r\n        try {\r\n\r\n            this._loading = true;\r\n            await agent.ActivityEndPoint.sendSMS(smsForm);\r\n            \r\n            runInAction(() => {\r\n                this._loading = false;\r\n                \r\n            })\r\n\r\n        }\r\n        catch(error) {\r\n\r\n        }\r\n    }\r\n\r\n    postSocialasync = async (socialForm:IActivity) => {\r\n        try {\r\n            this._loading = true;\r\n            console.log(socialForm);\r\n            await agent.ActivityEndPoint.postSocial(socialForm);\r\n            \r\n            runInAction(() => {\r\n                this._loading = false;\r\n                toast(\"Successfully send\");\r\n            })\r\n        }\r\n        catch(error) {\r\n            this._loading = false;\r\n            toast(`Error occured ${error}`);\r\n        }\r\n    }   \r\n\r\n\r\n\r\n    postWebAsync = async (webForm: IActivity) => {\r\n\r\n        try {\r\n\r\n            this._loading = true;\r\n            var formData = new FormData();\r\n            \r\n            formData.append(\"campaignId\",webForm.campaignId);\r\n            formData.append(\"title\",webForm.title);\r\n            formData.append(\"body\",webForm.body);\r\n    \r\n            if(webForm.coverImageFile !== undefined) {\r\n                formData.append(\"coverImageFile\",webForm.coverImageFile,webForm.coverImageFile?.name);\r\n            }\r\n\r\n            if(webForm.dateToSend !== undefined) {\r\n                formData.append(\"dateToSend\", webForm.dateToSend && webForm.dateToSend.toDateString());\r\n            }\r\n\r\n            formData.append(\"to\", webForm.to);\r\n\r\n            await agent.ActivityEndPoint.postWeb(formData);\r\n    \r\n            runInAction(() => {\r\n                this._loading = false;\r\n            })\r\n        }\r\n        catch(error: any) {\r\n            this._loading = false;\r\n            \r\n        }\r\n    }\r\n\r\n    initialize = async (type: string) => {\r\n        try {\r\n\r\n            let initial : IInitialValue = await agent.ActivityEndPoint.initialize(type);\r\n            runInAction(() => this._default = initial);\r\n            return initial;\r\n        }\r\n        catch(error) {\r\n\r\n        }\r\n    }\r\n\r\n    getTemplateValue = (id: string) : ITemplates => {\r\n        let itemValue : any;\r\n        this._default.templates.forEach(item => {\r\n            \r\n            if(item.id === id) {\r\n                itemValue = item;\r\n            } \r\n        });\r\n\r\n        return itemValue;\r\n    }\r\n    \r\n}","import moment from \"moment\"\r\n\r\n\r\nexport interface IInitialValue {\r\n    templates: ITemplates[],\r\n    groups: string[]\r\n}\r\n\r\nexport interface IActivity {\r\n    id: string,\r\n    campaignId: string,\r\n    \r\n    title: string,\r\n    description: string,\r\n    type: string,\r\n    dateToSend?: Date,\r\n    isRecurrent: boolean,\r\n    days : number,\r\n    status: string,\r\n    \r\n    toGroup: string,\r\n    to: string,\r\n    toCC: string,\r\n    toBcc: string,\r\n    subject: string,\r\n    body: string,\r\n    coverImageFile?: File\r\n}\r\n\r\nexport interface ICampaignModel {\r\n    id?: string,\r\n    title: string,\r\n    description: string,\r\n    dateFrom: Date | null,\r\n    dateTo: Date | null,\r\n    activities? : IActivity[] | undefined\r\n}\r\n\r\nexport interface ICampaignCollection {\r\n    campaigns: ICampaignModel[],\r\n    totalSMSActivities: number,\r\n    totalEmailActivities: number,\r\n    totalEcommerce: number,\r\n    totalSocialPost: number\r\n}\r\n\r\nexport interface ITemplates {\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    templateUrl: string,\r\n    templateHtml: string,\r\n    type: string\r\n}\r\nexport interface ISMSForm extends IActivity {\r\n    group: string,\r\n    mobileNos: string,\r\n    message: string,\r\n    \r\n}\r\n\r\nexport class ActivityModel implements IActivity {\r\n    id: string = \"\"\r\n    campaignId: string = \"\"\r\n    title: string = \"\"\r\n    description: string = \"\"\r\n    type: string = \"\"\r\n    group: string = \"\"\r\n    dateToSend?: Date | undefined = new Date()\r\n    isRecurrent: boolean = false\r\n    days : number = 0\r\n    status: string = \"\"\r\n    subject:string = \"\"\r\n    body: string = \"\"\r\n    coverImageFile?: File = undefined;\r\n    to: string = \"\"\r\n    toGroup: string = \"\"\r\n    toCC: string = \"\"\r\n    toBcc: string = \"\"\r\n\r\n    constructor(campaignId: string,type: string) {\r\n       this.campaignId = campaignId;\r\n       this.type = type;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport interface IActivityType {\r\n    title: string,\r\n    description: string,\r\n    type: string,\r\n    icon: JSX.Element\r\n}\r\n\r\n\r\n\r\nexport class CampaignModel implements ICampaignModel {\r\n\r\n    id?: string | undefined;\r\n    title: string = '';\r\n    description: string = '';\r\n    dateFrom: Date | null = null;\r\n    dateTo: Date | null = null;\r\n    activities?: IActivity[] | undefined = []\r\n\r\n    constructor(init? : CampaignFormValue) {\r\n        \r\n        this.dateFrom = new Date(Date.now());\r\n        this.dateTo = new Date(Date.now());\r\n\r\n        Object.assign(this,init!);\r\n    }\r\n\r\n}\r\n\r\nexport class CampaignFormValue {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    description: string = '';\r\n    dateFrom: Date | null = null;\r\n    dateTo: Date | null = null;\r\n    \r\n\r\n    constructor(campaign? : CampaignFormValue) {\r\n        if(campaign)\r\n            Object.assign(this,campaign);\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toast\";\r\nimport agent from \"../api/agent\";\r\nimport { CampaignModel,CampaignFormValue, ICampaignModel, ICampaignCollection } from \"../models/CampaignModel\";\r\nimport { store } from \"./store\";\r\nimport { ISentimentModel, ISentimentRequest } from \"../models/SentimentModel\";\r\n\r\n\r\nexport default class CampaignStore  {\r\n\r\n    \r\n\r\n    _collection : ICampaignCollection | undefined = undefined;\r\n    _selectedCampaign: CampaignModel | undefined = undefined;\r\n    _sentiment: ISentimentModel | undefined = undefined;\r\n    _loading : boolean = true;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get collection()  {\r\n        return this._collection;\r\n    }\r\n\r\n    get selected() {\r\n        if(this._selectedCampaign) return this._selectedCampaign;\r\n        return null;\r\n    }\r\n\r\n   \r\n    get loading() {\r\n        return this._loading;\r\n    }\r\n\r\n    getSelectedActivity(type: string) {\r\n        let activity = this._selectedCampaign?.activities?.find(act => act.type === type);\r\n        return activity;\r\n    }\r\n\r\n    loadAsync = async () => {\r\n        try {\r\n            this._loading = true;\r\n            var collection = await agent.EpCampaign.list();\r\n            \r\n            runInAction(() => {\r\n                this._collection = collection\r\n                this._loading = false;\r\n            });\r\n        }\r\n        catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    fetchSingleAsync = async (id : string) => {\r\n        this._loading = true;\r\n        var campaign = await agent.EpCampaign.detail(id);\r\n\r\n        runInAction(() => {\r\n            this.setCampaign(campaign);\r\n            this._loading = false;\r\n        });\r\n        return campaign;\r\n    }\r\n\r\n    saveAsync = async (campaign: CampaignFormValue)  => {\r\n        try {\r\n\r\n            this._loading = true;\r\n            \r\n            let newCampaign : ICampaignModel | null = null;\r\n            if(campaign.id === '' || campaign.id === undefined) {\r\n                newCampaign = await agent.EpCampaign.create(campaign);\r\n            }\r\n            else {\r\n                await agent.EpCampaign.edit(campaign);\r\n            }\r\n            \r\n            runInAction(() =>{\r\n                this._loading = false;\r\n            })\r\n            return newCampaign;\r\n        }\r\n        catch(error :any) {\r\n            this._loading = false;\r\n        }\r\n    }\r\n\r\n    updateAsync = async (campaign:CampaignFormValue) => {\r\n        try {\r\n            \r\n            this._loading = true;\r\n            await agent.EpCampaign.edit(campaign);\r\n\r\n            runInAction(() => {\r\n                this._loading = false;\r\n            })\r\n        }\r\n        catch(error : any) {\r\n            this._loading = false;\r\n        }\r\n    }\r\n\r\n    deleteAsync = async (id: string) => {\r\n        try {\r\n\r\n            this._loading = true;\r\n            await agent.EpCampaign.delete(id);\r\n            \r\n            runInAction(() => {\r\n\r\n                var campaigns = this._collection!\r\n                                    .campaigns\r\n                                    .filter(item => item.id !== id);\r\n                \r\n                if(campaigns) {\r\n                    this._collection!.campaigns = campaigns;\r\n                }\r\n                \r\n                this._loading = false;\r\n                toast(\"Successfully Deleted\");\r\n            })\r\n\r\n        }\r\n        catch(error) {\r\n            toast(store.commonStore.error?.message);\r\n            this._loading = false;\r\n        }\r\n    }\r\n\r\n    getSentimentAsync = async (text: ISentimentRequest) => {\r\n        try {\r\n            this._loading = true;\r\n            const sentiment = await agent.EpCampaign.segment(text);\r\n            runInAction(() => {\r\n                this._sentiment = sentiment;\r\n                this._loading = false;\r\n            });\r\n\r\n            return sentiment;\r\n\r\n        }\r\n        catch(error) {\r\n            toast(store.commonStore.error?.message);\r\n            this._loading = false;\r\n        }\r\n    }\r\n\r\n    private setCampaign = (campaign : CampaignModel,isPlural : boolean = false) => {\r\n        this._selectedCampaign = new CampaignModel(campaign);\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { ChannelModel, IChannel } from \"../models/ChannelModel\";\r\nimport { toast } from \"react-toast\";\r\n\r\n\r\nexport default class ChannelStore {\r\n\r\n    _loading: boolean = true;\r\n    _channels: ChannelModel[] | undefined = [];\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get channels() {\r\n        return this._channels;\r\n    }\r\n\r\n    get loading() {\r\n        return this._loading;\r\n    }\r\n\r\n    fetchAllAsync = async () => {\r\n        this._loading = true;\r\n        var channels = await agent.ChannelEndPoint.fetchAll();\r\n        \r\n        runInAction(() => {\r\n            this._channels = [];\r\n            channels.forEach(channel => this.setChannels(channel,true));\r\n            this._loading = false;\r\n        })\r\n    }\r\n\r\n    saveAsync = async (channel: IChannel) => {\r\n        this._loading = true;\r\n        await agent.ChannelEndPoint.createUpdate(channel);\r\n        \r\n        runInAction(() => {\r\n            this._loading = false;\r\n            toast(\"channel successfully save\");\r\n        })\r\n    }\r\n\r\n    private setChannels = (channel: ChannelModel,isPlural : boolean = false) => {\r\n        if(isPlural)\r\n            this._channels?.push(channel);\r\n    }\r\n\r\n\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { IServerError } from \"../models/ServerErrorModel\";\r\n\r\n\r\n\r\nexport default class CommonStore {\r\n    error: IServerError | null = null;\r\n    _token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this._token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    get token()  {\r\n        return this._token;\r\n    }\r\n    \r\n    setServerError = (error: IServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this._token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","export interface IContactModel {\r\n    id: string,\r\n    title: string,\r\n    firstName: string,\r\n    middleName: string,\r\n    lastName: string,\r\n    fullName: string,\r\n    emailAddress: string,\r\n    mobileNo?: string,\r\n    gender?: string,\r\n    birthDate?: Date | undefined,\r\n    primaryContact: string,\r\n    type: string,\r\n    groupTag?: string,\r\n    location: string\r\n}\r\n\r\n\r\nexport default class ContactFormValue implements IContactModel {\r\n    \r\n    id: string = \"\";\r\n    title: string = \"mr\";\r\n    firstName: string = \"\";\r\n    middleName: string = \"\";\r\n    lastName: string = \"\";\r\n    fullName: string = \"\";\r\n    emailAddress: string = \"\";\r\n    mobileNo?: string = \"\";\r\n    gender?: string = \"male\";\r\n    primaryContact: string = \"\";\r\n    type: string = \"\";\r\n    groupTag?: string =\"\";\r\n    location: string = \"\";\r\n   \r\n\r\n    constructor(init? : IContactModel) {\r\n        if(init)\r\n            Object.assign(this,init);\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toast\";\r\nimport agent from \"../api/agent\";\r\nimport ContactFormValue, { IContactModel } from \"../models/ContactModel\";\r\n\r\n\r\nexport default class ContactStore {\r\n    \r\n    _contactRegistry = new Map<string,IContactModel>();\r\n\r\n    _contacts: IContactModel[] | undefined = [];\r\n    _contact: IContactModel | undefined;\r\n    _loading: boolean = true;\r\n    _formTrigger: boolean = false;\r\n   \r\n    constructor() {\r\n        this._contact = new ContactFormValue();\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get getContact() {\r\n        return this._contact;\r\n    }\r\n\r\n    get getContacts() {\r\n        return this._contacts;\r\n    }\r\n\r\n    get getFormTrigger() {\r\n        return this._formTrigger;\r\n    }\r\n\r\n    get getLoading() {\r\n        return this._loading;\r\n    }\r\n\r\n    fetchContactsAsync = async (callback? : () => void) => {\r\n        this._loading = true;\r\n        var contacts = await agent.ContactsEndPoint.list();\r\n       \r\n        runInAction(() => {\r\n            this._contacts = [];\r\n            contacts.forEach((contact) => this.setContact(contact));\r\n            this._loading = false;\r\n            callback && callback();\r\n        });\r\n    }\r\n\r\n    findContactAsync = async (id : string, callback? : (contact: IContactModel) => void) => {\r\n        \r\n        this._loading = true;\r\n        var contact = await agent.ContactsEndPoint.find(id);\r\n\r\n        runInAction(() => {\r\n            this._loading = false;\r\n            if(callback !== undefined) callback(contact);\r\n        });\r\n        return contact;\r\n    }\r\n\r\n    fileUpload = async (file: File) => {\r\n        var formData = new FormData();\r\n        formData.append(\"file\",file,file.name);\r\n        await agent.ContactsEndPoint.import(formData);\r\n        runInAction(() => {\r\n            toast(\"Successfully uploaded\");\r\n        })\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    saveContactAsync = async (contactForm : IContactModel) => {\r\n        \r\n        this._loading = true;\r\n        this._formTrigger = false;\r\n        if(contactForm.id && contactForm.id !== \"\") {\r\n            agent.ContactsEndPoint.update(contactForm);\r\n        }else {\r\n            await agent.ContactsEndPoint.create(contactForm);\r\n        }\r\n        runInAction(() => {\r\n            this._loading = false;\r\n            \r\n        })\r\n    }\r\n    updateContactAsync = async (contactForm : IContactModel, afterSubmit? : () => void) => {\r\n        \r\n        this._loading = true;\r\n        await agent.ContactsEndPoint.update(contactForm);\r\n        runInAction(() => {\r\n            this._loading = false;\r\n            this._contact = contactForm;\r\n            if(afterSubmit !== undefined) afterSubmit();\r\n        })\r\n    }\r\n\r\n    createNew = () => {\r\n\r\n        return new ContactFormValue({\r\n            id: \"\",\r\n            title: \"mr\",\r\n            firstName: \"\",\r\n            middleName: \"\",\r\n            lastName: \"\",\r\n            fullName: \"\",\r\n            emailAddress:   \"\",\r\n            gender: \"male\",\r\n            primaryContact: \"\",\r\n            type: \"mr\",\r\n            location:  \"\",\r\n            groupTag: \"\",\r\n        });\r\n        \r\n    } \r\n\r\n    setFormTrigger = (value : boolean) => { this._formTrigger = value;}\r\n\r\n    private setContact = (contact : IContactModel,isPlural : boolean = true) => {\r\n        if (isPlural) \r\n            this._contacts?.push(contact);\r\n        else \r\n            this._contactRegistry.set(contact.id,contact);\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { IMenuNav } from \"../models/MenuModel\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nconst MenuCollection : IMenuNav[] = [\r\n    { title: \"Campaign\", key:\"campaign\",link:\"/campaign\",enabled: false,selected: false, icon: 'bullhorn'},\r\n    {title: \"Task\", key:\"task\",link:\"/task\",enabled: false,selected: false,icon: 'calendar outline'},\r\n    {title: \"Contact\", key:\"contact\",link:\"/contact\",enabled: false,selected: false,icon: 'user outline'},\r\n    {title: \"Settings\", key:\"settings\",link:\"/setting\",enabled: false,selected: false,icon: 'setting'},\r\n    {title: \"User\", key:\"user\",link:\"/user\",enabled: false,selected: false,icon: 'user'},\r\n]\r\n\r\nexport default class MenuStore {\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    useDefaultAccess()  {\r\n        var user = store.userStore.current;\r\n        let role = user?.roles[0];\r\n        let redirect = \"/\";\r\n        switch(role) {\r\n            case \"manager\":\r\n                redirect = '/campaign'\r\n                break;\r\n            case \"admin\":\r\n                redirect = '/contact'\r\n                break;\r\n            case \"staff\":\r\n                redirect = '/task'\r\n                break;\r\n            case \"sales\":\r\n                redirect = '/contact'\r\n                break;\r\n            default:\r\n                redirect = '/'\r\n                break;\r\n        }\r\n        return redirect;\r\n    }\r\n\r\n   \r\n    initialize() {\r\n        let _menuNav : IMenuNav[] = [];\r\n\r\n        MenuCollection.forEach((nav) => {\r\n            var user = store.userStore.current;\r\n            let role = user?.roles[0];\r\n            switch (nav.key) {\r\n                case \"campaign\":\r\n                    nav.enabled = (role === \"manager\");\r\n                    break;\r\n                case \"task\":\r\n                    nav.enabled = (role === \"manager\" || role === \"admin\" || role === \"staff\");\r\n                    break;\r\n                case \"contact\":\r\n                    nav.enabled = (role === \"admin\" || role === \"manager\" || role === \"sales\");\r\n                    break;\r\n                case \"settings\":\r\n                    nav.enabled = (role === \"admin\");\r\n                    break;\r\n                case \"user\":\r\n                    nav.enabled = (role === \"admin\");\r\n                    break;\r\n            }\r\n            _menuNav.push(nav);\r\n        });\r\n        return _menuNav;\r\n    }\r\n\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface IModal<T> {\r\n    isOpen: boolean,\r\n    onTriggerListener : (value : T) => void;\r\n}\r\n\r\nexport default class ModalStore {\r\n    \r\n    _modal: IModal<string> = {\r\n        isOpen: false,\r\n        onTriggerListener: (value : string) => {}\r\n    }\r\n    \r\n    get modal() {\r\n        return this._modal;\r\n    }\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    open = () => {\r\n        this._modal!.isOpen = true;\r\n    }\r\n\r\n    close = () => {\r\n       this._modal!.isOpen = false;\r\n    }\r\n\r\n    setOnNotifyListener = (callback: (value : string) => void)  => this.modal!.onTriggerListener = callback;\r\n\r\n    notifyEvent = (value : string) => {\r\n        this.modal!.onTriggerListener(value);\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { ISubTaskModel, ITaskModel } from \"../models/TaskModel\";\r\n\r\n\r\ninterface ISubTaskPerUser {\r\n    id:string,\r\n    title: string,\r\n    taskPerUser: Map<string,ISubTaskModel> | undefined\r\n}\r\n\r\nexport default class TaskStore {\r\n    \r\n    _tasks : ITaskModel[] | undefined = [];\r\n    _taskSelected: ITaskModel | undefined;\r\n    _taskPerUser : ISubTaskPerUser | undefined;\r\n    _loading: boolean = true;\r\n    _users: string[] | undefined;\r\n   \r\n    \r\n    constructor() {\r\n        this._users = [];\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get tasks() {\r\n        return this._tasks;\r\n    }\r\n\r\n  \r\n\r\n    get task() {\r\n        return this._taskSelected;\r\n    }\r\n\r\n    \r\n    \r\n    get taskTodo() {\r\n        var task = this._taskSelected;\r\n        return task ? task!.subTasks?.filter(item => item.status === \"Todo\") : [];\r\n    }\r\n    \r\n    get taskDoing() {\r\n        var task = this._taskSelected;\r\n        \r\n        return task ? task!.subTasks?.filter(item => item.status === \"Doing\") : [];\r\n    }\r\n\r\n    get taskDone() {\r\n        var task = this._taskSelected;\r\n        \r\n        return task ? task!.subTasks?.filter(item => item.status === \"Done\") : [];\r\n    }\r\n    \r\n    get loading() {\r\n        return this._loading;\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n\r\n    fetchAllAsync = async () => {\r\n        this.setLoading(true);\r\n        var tasks = await agent.TaskEndPoint.fetchAll();\r\n        \r\n        runInAction(() => {\r\n            this._tasks = [];\r\n            if(tasks) \r\n                tasks.forEach(task => this.setTask(task,true));\r\n        })\r\n        this.setLoading(false);\r\n    }\r\n\r\n    createTaskAsync = async (task : ITaskModel) => {\r\n        try {\r\n            this.setLoading(true);\r\n            \r\n            await agent.TaskEndPoint.create(task);\r\n            runInAction(() => {\r\n                this.setTask(task,false);\r\n            })\r\n            this.setLoading(false);\r\n        }\r\n        catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    fetchTaskAsync = async (taskId:string,user:string = \"\") => {\r\n        this.setLoading(true);\r\n        var task = await agent.TaskEndPoint.fetchDetail(taskId);\r\n        runInAction(() => {\r\n            this.setTask(task,false);\r\n            if(task.subTasks && task.subTasks.length > 0) {\r\n                this._users = [];\r\n                task.subTasks.forEach(subtask => {\r\n                    this._users?.push(subtask.assignedTo)\r\n                });\r\n            }\r\n        });\r\n        this.setLoading(false);\r\n    }\r\n\r\n    addSubTask = async (newSubTask: ISubTaskModel)=> {\r\n        this._loading = true;\r\n        const newTask : ITaskModel =  {\r\n            id: this._taskSelected?.id,\r\n            title: \"\",\r\n            close : false,\r\n            subTasks: [newSubTask]\r\n        };\r\n        await agent.TaskEndPoint.createUpdateSubTask(newTask);\r\n        \r\n        runInAction(() => {\r\n            this._taskSelected?.subTasks?.push(newSubTask);\r\n            this._loading = false;\r\n        })\r\n    }\r\n\r\n    updateSubTask = async (subTaskId: string,key:string,value:any) => {\r\n\r\n        try {\r\n\r\n            this._loading = true;\r\n            let subTask  = this._taskSelected?.subTasks?.find(item => item.id === subTaskId);\r\n            \r\n            if(subTask) {\r\n                if(key === 'status')\r\n                    subTask.status = value;\r\n                else if(key === 'task') \r\n                    subTask.task = value;\r\n                else if(key === 'markDelete')\r\n                    subTask.markDelete = value;\r\n                else \r\n                    subTask.status = value;\r\n            }\r\n    \r\n            const newTask : ITaskModel =  {\r\n                id: this._taskSelected?.id,\r\n                title: \"\",\r\n                close : false,\r\n                subTasks: []\r\n            };\r\n    \r\n            newTask.subTasks?.push(subTask!);\r\n            await agent.TaskEndPoint.createUpdateSubTask(newTask);\r\n            \r\n            runInAction(() => {\r\n                this._loading = false;\r\n            })\r\n            \r\n        }\r\n        catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n   \r\n\r\n\r\n    private setTask = (task: ITaskModel,isPlural : boolean) => {\r\n        if(isPlural) {\r\n\r\n            this._tasks?.push(task);\r\n        }\r\n        else    \r\n        {\r\n            this._taskSelected = task;\r\n        }\r\n    }\r\n\r\n    private setLoading = (toggle: boolean) => {\r\n        this._loading = toggle;\r\n    }\r\n}","import { INotification } from \"./NotificationModel\";\r\n\r\nexport interface IUser {\r\n    id: string,\r\n    username: string;\r\n    displayName: string;\r\n    email: string;\r\n    jobTitle: string;\r\n    token: string;\r\n    password: string;\r\n    department: string;\r\n    roles: string[];\r\n    notifications: INotification[];\r\n}\r\n\r\n\r\nexport interface ILogin {\r\n    username: string;\r\n    password: string;\r\n    error: any;\r\n}\r\n\r\nexport interface IRegister {\r\n    id: string,\r\n    username: string;\r\n    email: string,\r\n    password: string,\r\n    displayName: string;\r\n    jobTitle: string;\r\n    department: string;\r\n    role: string;\r\n}\r\n\r\nexport class UserProfileModel implements IUser {\r\n    id: string = '';\r\n    username: string = '';\r\n    displayName: string = '';\r\n    jobTitle: string = '';\r\n    email: string = '';\r\n    token: string = '';\r\n    password: string = '';\r\n    department: string = '';\r\n    roles: string[] = [];\r\n    notifications: INotification[] = [];\r\n\r\n     /**\r\n     *\r\n     */\r\n      constructor(init? : IUser) {\r\n        if(init) Object.assign(this,init);\r\n        \r\n    }\r\n}\r\n\r\nexport class UserModel implements IUser {\r\n    id: string = '';\r\n    username: string = '';\r\n    displayName: string = '';\r\n    jobTitle: string = '';\r\n    email: string = '';\r\n    token: string = '';\r\n    password: string = '';\r\n    department: string = '';\r\n    roles: string[] = [];\r\n    notifications: INotification[] = [];\r\n    /**\r\n     *\r\n     */\r\n    constructor(init? : UserModel) {\r\n        if(init) Object.assign(this,init);\r\n        \r\n    }\r\n    \r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { toast } from \"react-toast\";\r\nimport agent from \"../api/agent\";\r\nimport { ILogin, IRegister, IUser, UserModel } from \"../models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n\r\n    _user: IUser | null = null;\r\n    _users: UserModel[] | undefined = [];\r\n    _loading : boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!store.commonStore.token;\r\n    }\r\n\r\n    get current() {\r\n        return this._user;\r\n    }\r\n\r\n    get loading() {\r\n        return this._loading;\r\n    }\r\n    \r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    login = async (creds: ILogin) => {\r\n        try {\r\n            const user = await agent.UserEndPoint.login(creds);\r\n            \r\n            store.commonStore.setToken(user.token);\r\n            \r\n            this.setUser(user);\r\n            runInAction(() =>  console.log(user));\r\n        }\r\n        catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.setUser(null);\r\n    }\r\n\r\n    \r\n    fetchCurrent = async () => {\r\n        try {\r\n            const user =  await agent.UserEndPoint.current();\r\n            this.setUser(user);\r\n            \r\n            return user;\r\n        }\r\n        catch(error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    registerUserAsync = async (register: IRegister) => {\r\n        try {\r\n            this._loading = true;\r\n            var user = await agent.UserEndPoint\r\n                                    .register(register);\r\n            runInAction(() => {\r\n                this._loading = false;\r\n                toast(\"Succefully registered\")\r\n            })\r\n        }\r\n        catch(err) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateAsync = async (register: IRegister) => {\r\n        try {\r\n            this._loading = true;\r\n            var user = await agent.UserEndPoint\r\n                                    .update(register);\r\n            runInAction(() => {\r\n                this._loading = false;\r\n                toast(\"Succefully updated\")\r\n            })\r\n        }\r\n        catch(err) {\r\n            \r\n        }\r\n    }\r\n\r\n    updateNotification = async (id: string) => {\r\n        try {\r\n            this._loading = true;\r\n\r\n            await agent.UserEndPoint.readNotification({ \r\n                    id: id,hasRead: \r\n                    true,createdAt: undefined,description: \"\",userId: \"\" });\r\n            runInAction(() => {\r\n                this._loading = false;\r\n                toast(\"Succefully updated\")\r\n            })\r\n        }catch(error) {\r\n            this._loading = false;\r\n        } \r\n    }\r\n\r\n    fetchUsersAsync = async () => {\r\n       this._loading = true;\r\n        let users = await agent.UserEndPoint.all();\r\n\r\n        runInAction(() => {\r\n            this._users = [];\r\n            users.forEach(user => {\r\n                this._users!.push(new UserModel(user));\r\n               \r\n            })\r\n            this._loading = false;\r\n        })\r\n    }\r\n\r\n    fetchProfileAsync = async () => {\r\n        this._loading = true;\r\n        let result = await agent.UserEndPoint.getUserProfile();\r\n\r\n        runInAction(() => this._loading = false);\r\n\r\n        return result;\r\n        \r\n    }\r\n\r\n    \r\n\r\n    fetchAllUserAsync = async () => {\r\n        try {\r\n            \r\n            let users : IUser[] = [];\r\n            if(this.current?.roles.find(item => item === \"manager\")) {\r\n                users = await agent.UserEndPoint.all();\r\n                console.log(users);\r\n                this._users = [];\r\n                runInAction(() => {\r\n                    users.forEach(user => {\r\n                        this._users?.push(new UserModel(user));\r\n                       \r\n                    })\r\n                })\r\n            }\r\n            else {\r\n                users = [];\r\n            }\r\n            return users;\r\n        }\r\n        catch(error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    private setUser = (user : IUser | null = null) => {\r\n        if(user) {\r\n            this._user = new UserModel(user);\r\n        }\r\n        else {\r\n            this._user = null;\r\n        }\r\n    }\r\n}","import { useContext ,createContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CampaignStore from \"./campaignStore\";\r\nimport ChannelStore from \"./channelStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ContactStore from \"./contactStore\";\r\nimport MenuStore from \"./menuStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport TaskStore from \"./taskStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\n\r\ninterface Store {\r\n    modalStore : ModalStore,\r\n    campaignStore : CampaignStore,\r\n    contactStore : ContactStore,\r\n    taskStore: TaskStore,\r\n    activityStore: ActivityStore,\r\n    userStore: UserStore,\r\n    commonStore : CommonStore,\r\n    menuStore: MenuStore,\r\n    channelStore: ChannelStore\r\n}\r\n\r\nexport const store : Store = {\r\n    modalStore : new ModalStore(),\r\n    campaignStore : new CampaignStore(),\r\n    contactStore: new ContactStore(),\r\n    taskStore: new TaskStore(),\r\n    activityStore: new ActivityStore(),\r\n    userStore: new UserStore(),\r\n    commonStore : new CommonStore(),\r\n    menuStore: new MenuStore(),\r\n    channelStore: new ChannelStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { Formik,Form, ErrorMessage } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport { FormikTextField } from \"../../components/Inputs/FormInputs\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    \r\n    const {userStore,menuStore} = useStore();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if(userStore.isLoggedIn) {\r\n            history.push(menuStore.useDefaultAccess());\r\n        }\r\n    },[userStore]);\r\n  \r\n    return(\r\n        <Formik\r\n            initialValues={{username: '',password:'', error : null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n                            .then((resp) => history.push(menuStore.useDefaultAccess()))\r\n                            .catch((error) => setErrors({error: error.response.data }))}>\r\n            {({handleSubmit,isSubmitting,errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header color=\"blue\" content=\"Campaign Management Login\" textAlign=\"center\"/>\r\n                    <FormikTextField  name='username' placeholder='Email' />\r\n                    <FormikTextField  name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n});","import { Helmet } from \"react-helmet\";\r\nimport { Card, Container, Image } from \"semantic-ui-react\";\r\nimport LoginForm from \"../Users/LoginForm\";\r\n\r\nexport default function LoginPage() {\r\n    return (\r\n        <>\r\n            <Helmet><style>{\"body {background-color: #415989 !important;}\"}</style></Helmet>\r\n            <Container style={{width: '400px', paddingTop: '150px'}}>\r\n                <Image centered src=\"https://cdn.shopify.com/s/files/1/0394/2698/2055/files/NABCO_LOGOwhite_250x.png?v=1590742571\" size=\"medium\" />\r\n                <Card style={{ width: '100%' }}>\r\n                    <Card.Content >\r\n                        <LoginForm />\r\n                        <p style={{\"padding\": \"10px;\"}}>ver 2.0</p>\r\n                    </Card.Content>\r\n                </Card>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React, { useContext, useState } from \"react\"\r\n\r\n\r\ninterface INotificationContext {\r\n    notified : boolean,\r\n    notify : () => void\r\n}\r\n\r\nexport const  TaskNotificationContext = React.createContext<INotificationContext | undefined>(undefined);\r\n\r\nexport const TaskNotificationProvider : React.FC = ({children}) => {\r\n    const [notified, setNotified] = useState<boolean>(false);\r\n    \r\n    const notify = () => {\r\n        setNotified(!notified);\r\n    }\r\n\r\n    const value : INotificationContext = {\r\n        notified : notified,\r\n        notify : notify\r\n    };\r\n\r\n    return(\r\n        <TaskNotificationContext.Provider value={value}>\r\n            {children}\r\n        </TaskNotificationContext.Provider>\r\n    )\r\n}  \r\n\r\n\r\nexport const useTaskNotificationContext = () => {\r\n    const context = useContext(TaskNotificationContext);\r\n    if(!context) throw new Error(\"context is undefined\");\r\n    return context;\r\n}","import React, { useEffect } from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\nimport { useTaskNotificationContext } from \"../Notifications/TaskNotificationProvider\";\r\n\r\ninterface Props {\r\n    inverted?: boolean,\r\n    content?: string\r\n}\r\n\r\nexport default function LoaderComponent({inverted,content} : Props) {\r\n    const {notify,notified} = useTaskNotificationContext();\r\n    useEffect(() => {\r\n        if(!notified) {\r\n            notify();\r\n        }\r\n    },[inverted])\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n\r\n}","import { Button, Header, Label, Table } from \"semantic-ui-react\";\r\nimport { IActivity } from \"../../../models/CampaignModel\";\r\n\r\n\r\n\r\n\r\ninterface Props {\r\n    data?: IActivity[]\r\n    clickReplay: (id: string) => void,\r\n    clickDelete: (id: string) => void\r\n}\r\n\r\nexport default function ActivityList(props: Props) {\r\n    return (\r\n        <>\r\n            <Table celled padded>\r\n                <Table.Body>\r\n                    {\r\n                        (props.data !== undefined && props.data!.length > 0) ?\r\n                            (props.data!.map((activity: IActivity, index) => (\r\n                                <Table.Row key={index}>\r\n                                    <Table.Cell width={12}>\r\n                                        <Header as='h4'\r\n\r\n                                            content={activity.title}\r\n                                            subheader={activity.description} />\r\n                                    </Table.Cell>\r\n                                    <Table.Cell>\r\n                                        <Label>{activity.status}</Label>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell width={2}>\r\n                                        <Label>{activity.type}</Label>\r\n                                    </Table.Cell>\r\n                                    <Table.Cell width={2} >\r\n                                        <Button size=\"mini\" icon='play' color=\"green\" onClick={() => props.clickReplay(activity.id)} />\r\n                                        <Button size=\"mini\" icon='trash' color=\"red\" onClick={() => props.clickDelete(activity.id)} />\r\n                                    </Table.Cell>\r\n                                </Table.Row>)\r\n                            )\r\n                            ) : (<Header content=\"No Data Available\" as=\"h2\" />)\r\n                    }\r\n                </Table.Body>\r\n            </Table>\r\n        </>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    title: string,\r\n    isOpen : boolean,\r\n    size?: any | undefined\r\n}\r\n\r\nexport interface IModalContextProps {\r\n    isOpenModal : boolean,\r\n    openModal : (target:string) => void,\r\n    closeModal: (target:string) => void,\r\n    modalSize?: any,\r\n    action: IActionProps\r\n}\r\n\r\n\r\n\r\ninterface IModalContainerProps {\r\n    modalSize?: any,\r\n    title: string,\r\n    name: string\r\n}\r\n\r\nexport const ModalContext = createContext<IModalContextProps | undefined>(undefined);\r\n\r\nexport const ModalForm : React.FC<IModalContainerProps> = ({children,name,modalSize,title}) => {\r\n    const {action} = useModal();\r\n\r\n    const [isOpen,setIsOpen] = useState<boolean>(false);\r\n    \r\n    useEffect(() => {\r\n        if(action) {\r\n            if(action.action === 'open' && action.key === name) \r\n                setIsOpen(true);\r\n            else\r\n                setIsOpen(false);\r\n        }\r\n\r\n    },[action]);\r\n  \r\n    return(\r\n        <Modal key={name} open={isOpen} size={modalSize ?? 'small'}  >\r\n            <Modal.Header>{title}</Modal.Header>\r\n            <Modal.Content>\r\n                {children}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n}\r\n\r\ninterface IActionProps {\r\n    action: string,\r\n    key: string\r\n}\r\n\r\nexport const ModalProvider : React.FC = ({children}) => {\r\n    \r\n    const [isOpenModal,setIsOpenModal] = useState<boolean>(false);\r\n    const [action,setAction] = useState<IActionProps | undefined>(undefined);\r\n    \r\n    const openModal = (target: string) => {\r\n        setAction({action: \"open\",key: target});\r\n    } \r\n\r\n    const closeModal = (target: string) => {\r\n        setAction({action: \"close\",key: target});\r\n    }\r\n    \r\n    const value : IModalContextProps = {\r\n        isOpenModal: isOpenModal,\r\n        openModal: openModal,\r\n        closeModal,\r\n        action: action!\r\n    }   \r\n\r\n    return(\r\n        <ModalContext.Provider value={value}>\r\n            {children}\r\n        </ModalContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useModal = () => {\r\n    const context = useContext(ModalContext);\r\n    if(!context) throw new Error(\"context is undefined\");\r\n    return context;\r\n}\r\n\r\nexport default observer(function ModalContainer(props : React.PropsWithChildren<Props>) {\r\n    \r\n    return(\r\n        <Modal open={props.isOpen} size={props.size ?? 'small'}  >\r\n            <Modal.Header>{props.title}</Modal.Header>\r\n            <Modal.Content>\r\n                {props.children}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n});\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Header, Icon, Table, Button } from \"semantic-ui-react\";\r\nimport { ModalForm } from \"../../../components/Modals/ModalContainer\";\r\nimport { IActivityType } from \"../../../models/CampaignModel\";\r\n\r\n\r\n\r\n\r\nconst activityTypes: IActivityType[] = [\r\n    {\r\n        title: 'SMS Campaign',\r\n        description: 'Send SMS Messages',\r\n        type: 'sms',\r\n        icon: <Icon name='mobile alternate' />\r\n    },\r\n    {\r\n        title: 'Email Campaign',\r\n        description: 'Send Email to Customer',\r\n        type: 'email',\r\n        icon: <Icon name='envelope outline' />\r\n    },\r\n    {\r\n        title: 'RSS Campaign',\r\n        description: 'Send RSS to Website',\r\n        type: 'rss',\r\n        icon: <Icon name='rss' />\r\n    },\r\n    {\r\n        title: 'Website Campaign',\r\n        description: 'Post Campaign to Website',\r\n        type: 'web',\r\n        icon: <Icon name='globe' />\r\n    },\r\n    {\r\n        title: 'Facebook Campaign',\r\n        description: 'Post Campaign to Facebook',\r\n        type: 'social',\r\n        icon: <Icon name='facebook' />\r\n    },\r\n   \r\n];\r\n\r\ninterface IProps {\r\n    notifyOnClick : (type:string) => void\r\n}\r\n\r\n\r\nexport default observer(function ActivityListModal({notifyOnClick} : IProps) {\r\n    \r\n    return (\r\n        <ModalForm  name=\"activityTypes\"  title=\"Activity Types\" modalSize=\"small\">\r\n            <Table>\r\n                <Table.Body>\r\n                    {activityTypes.map((activity,index) => (\r\n                        <Table.Row key={index}>\r\n                            <Table.Cell width={14}>\r\n                                <Header as='h4' image>\r\n                                    {activity.icon}\r\n                                    <Header.Content>\r\n                                        {activity.title}\r\n                                        <Header.Subheader>{activity.type}</Header.Subheader>\r\n                                    </Header.Content>\r\n                                </Header>\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Button positive content=\"Select\" onClick={() => notifyOnClick(activity.type)} />\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n                </Table.Body>\r\n            </Table>\r\n        </ModalForm>\r\n    )\r\n});","import { Card, Feed } from \"semantic-ui-react\";\r\n\r\ninterface FeedBackModel {\r\n    image: string,\r\n    day: string,\r\n    description: string\r\n}\r\n\r\nconst feedbacks : FeedBackModel[] = [\r\n    {\r\n        image: 'lena.png',\r\n        day: '1 day ago',\r\n        description: 'Likes your Post'\r\n    },\r\n    {\r\n        image: 'lena.png',\r\n        day: '2 days ago',\r\n        description: 'Inquire about Recliner Lazboy'\r\n    },\r\n    {\r\n        image: 'lena.png',\r\n        day: '1 day ago',\r\n        description: 'Happy with the service'\r\n    }\r\n\r\n] \r\n\r\n\r\nexport default function ContentBlock() {\r\n    return (\r\n        <Card>\r\n            <Card.Content>\r\n                <Card.Header>Recent Activity</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Feed>\r\n                    {feedbacks && feedbacks.map((feedback,index) => (\r\n                        <Feed.Event key={index}>\r\n                            <Feed.Label image={`/assets/${feedback.image}`} />\r\n                            <Feed.Content>\r\n                                <Feed.Date content={feedback.day} />\r\n                                <Feed.Summary>\r\n                                    {feedback.description}\r\n                                </Feed.Summary>\r\n                            </Feed.Content>\r\n                        </Feed.Event>\r\n\r\n                    ))}\r\n                </Feed>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n}","\r\nimport React from \"react\"\r\nimport { Header, Icon, Segment, SemanticCOLORS, SemanticICONS } from \"semantic-ui-react\"\r\n\r\n\r\ninterface IPageProps {\r\n    color? : SemanticCOLORS | undefined\r\n}\r\n\r\ninterface IPageHeader {\r\n    title: string,\r\n    description: string,\r\n    icon?: SemanticICONS,\r\n    childWidth?: string\r\n    ownerWidth?: string  \r\n}\r\n\r\n\r\ninterface IPageCompound {\r\n    Header : React.FC<IPageHeader>\r\n    Content: React.FC\r\n}\r\n\r\n\r\nconst PageHeader : React.FC<IPageHeader> = ({children,title,description,icon,ownerWidth,childWidth}) => {\r\n    \r\n    \r\n    return(\r\n        <div className=\"row\">\r\n            <div className={ ownerWidth ?? \"fourteen wide column\"}>\r\n                <Header as='h2'>\r\n                    {icon && <Icon name={icon} />}\r\n                    <Header.Content>\r\n                        {title}\r\n                        <Header.Subheader>{description}</Header.Subheader>\r\n                    </Header.Content>\r\n                </Header>\r\n            </div>\r\n            <div className={childWidth ?? \"column\"}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PageContent : React.FC = ({children,...restProps}) => {\r\n    return(\r\n        <div className=\"row\" {...restProps}>\r\n            <div className=\"column\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Page : React.FC<IPageProps> & IPageCompound = ({children,color}) => {\r\n    return(\r\n        <Segment color={color}>\r\n            <div className=\"ui grid\">\r\n                {children}\r\n            </div>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nPage.Header = PageHeader;\r\nPage.Content = PageContent;\r\n\r\nexport default Page;","import moment, { MomentInput } from \"moment\";\r\n\r\n\r\nexport function toDateFormat(value : MomentInput) {\r\n    return moment(value).format('MMM/DD/yyyy');\r\n}\r\n\r\n\r\nexport function convertToTitleCase(value : string) {\r\n    let sentence = value.toLowerCase().split(\" \");\r\n    for (let i = 0; i < sentence.length; i++) {\r\n        sentence[i] = sentence[i][0].toUpperCase() + sentence[i].slice(1);\r\n    }\r\n    \r\n    return sentence.join(\" \");\r\n}\r\n\r\n\r\n\r\n\r\nexport enum enumModalType {\r\n    OkOnly = 1,\r\n    OkSave = 2\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Grid, Icon } from \"semantic-ui-react\";\r\nimport LoaderComponent from \"../../../components/Loader/LoaderComponent\";\r\nimport { useStore } from \"../../../stores/store\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListModal from \"../Modal/ActivityListModal\";\r\nimport ContentBlock from \"./ContentBlock\";\r\nimport Page from \"../../../components/Layouts/Page\";\r\nimport { useModal } from \"../../../components/Modals/ModalContainer\";\r\nimport { toast } from \"react-toast\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    \r\n    //parameter\r\n    const {id} = useParams<{id : string}>();\r\n\r\n    const {\r\n        campaignStore : { fetchSingleAsync,selected,loading},\r\n        activityStore: { replay,deleteActivity }} = useStore();\r\n    \r\n    const history = useHistory();\r\n\r\n    const { openModal,closeModal } = useModal();\r\n   \r\n    function notifyOnClick(value : string)  {\r\n\r\n        closeModal(\"activityTypes\");\r\n        history.push(`/activity/${id}/${value}`);\r\n\r\n    };\r\n\r\n    function replayHandler(id: string ) {\r\n        //call store to trigger\r\n        replay(id).then(() => {\r\n            toast(\"Resend successful\");\r\n        });\r\n    }\r\n\r\n    function deleteHandler(id: string) {\r\n        const confimation = window.confirm(\"Are you sure you want to delete this activity?\");\r\n        if(confimation) {\r\n            deleteActivity(id);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            fetchSingleAsync(id);\r\n        }\r\n    },[fetchSingleAsync,id])\r\n\r\n    if(loading) return <LoaderComponent content=\"Loading\" inverted={true}/>\r\n    \r\n    return (\r\n        <>\r\n            <Page color='green'>\r\n                <Page.Header title={selected?.title!} description={selected?.description!}>\r\n                    <Button.Group>\r\n                        <Button color=\"green\" size=\"mini\" onClick={() => openModal(\"activityTypes\")}>\r\n                            <Icon name='add' />Create\r\n                        </Button>\r\n                    </Button.Group>\r\n                </Page.Header>\r\n                <Page.Content>\r\n                    <Grid>\r\n                        <Grid.Row>\r\n                            <Grid.Column width={12}>\r\n                                <ActivityList \r\n                                    data={selected?.activities} \r\n                                    clickReplay={replayHandler}\r\n                                    clickDelete={deleteHandler}  />\r\n                            </Grid.Column>\r\n                            <Grid.Column width={4}>\r\n                                <ContentBlock />\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                    <ActivityListModal notifyOnClick={notifyOnClick} />\r\n                </Page.Content>\r\n            </Page>\r\n        </>\r\n    )\r\n});","import { Button, Grid } from \"semantic-ui-react\";\r\nimport { ModalForm, useModal } from \"./ModalContainer\";\r\n\r\n\r\ninterface IProps {\r\n    name: string,\r\n    title: string,\r\n    message?: string,\r\n    clickOkButton?: () => void,\r\n    clickCancelButton?: () => void \r\n}\r\n\r\nexport const ModalAlert : React.FC<IProps> = ({children,name, title,message,clickCancelButton,clickOkButton}) => {\r\n\r\n    const {closeModal} = useModal();\r\n\r\n    const onClickCloseHandler = () => {\r\n        closeModal(name);\r\n        clickCancelButton && clickCancelButton();\r\n    }\r\n\r\n    const onClickOkHandler = () => {\r\n        closeModal(name);\r\n        clickOkButton && clickOkButton();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <ModalForm\r\n           title={title}\r\n           name={name}>\r\n            <Grid>\r\n                <Grid.Row>\r\n                    {message}\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Button positive onClick={onClickOkHandler}>Ok</Button>\r\n                    <Button negative onClick={onClickCloseHandler}>Cancel</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </ModalForm>\r\n    );\r\n}","import React, { PropsWithChildren } from \"react\"\r\nimport { Grid, Table,Input,TableHeaderCellProps } from \"semantic-ui-react\"\r\n\r\nexport interface ColumnType extends TableHeaderCellProps {\r\n    key: string,\r\n    Text: string,\r\n}\r\n\r\nexport interface RowType<T>  {\r\n    data: T[]\r\n}\r\n\r\ninterface IProps<T> {\r\n    columns : ColumnType[] | undefined,\r\n    children: (data : T, key: number) => React.ReactChild,\r\n    initialValues: T[] | [],\r\n    onInputChange?: (value:string,columns: ColumnType[] | undefined) => void | undefined\r\n}\r\n\r\nexport const DataTable = <T,>(props: PropsWithChildren<IProps<T>>) => {\r\n    \r\n    \r\n    return(\r\n        <Grid padded>\r\n            <Grid.Row>\r\n                <Grid.Column width={16}>\r\n                    <Input\r\n                        icon={{ name: 'search', circular: true, link: true }}\r\n                        placeholder='Search...'\r\n                        fluid\r\n                        onChange={(event) => props.onInputChange && \r\n                            props.onInputChange(event.target.value,props.columns)}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Table>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                        {props.columns && props.columns.map((column,index) => (\r\n                            <Table.HeaderCell  \r\n                                key={index}\r\n                                width={column.width} \r\n                                textAlign={column.textAlign}>{column.Text}</Table.HeaderCell>\r\n                        ))}\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                            {props.initialValues && \r\n                            props.initialValues.map((data,index) => props.children(data,index)\r\n                            )}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Table } from \"semantic-ui-react\";\r\nimport { ColumnType, DataTable } from \"../../components/DataTables/DataTable\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { ICampaignModel } from \"../../models/CampaignModel\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { toDateFormat } from \"../../util/helper\";\r\n\r\ninterface IProps {\r\n    viewClick: (id: string) => void,\r\n    deleteClick: (id: string) => void\r\n    editClick: (id: string) => void\r\n}\r\n\r\nexport default observer(function CampaignList({ viewClick, deleteClick,editClick }: IProps) {\r\n\r\n    const { campaignStore } = useStore();\r\n    const { collection } = campaignStore;\r\n\r\n    const history = useHistory();\r\n    const { openModal } = useModal();\r\n\r\n    const [campaigns, setCampaigns] = useState<ICampaignModel[] | undefined>(collection?.campaigns)\r\n\r\n\r\n    \r\n\r\n    const OnInputChangeHandler = (value: string, column: ColumnType[]) => {\r\n\r\n        const list = collection?.campaigns.filter(item =>\r\n            item['title']!.toString().indexOf(value) !== -1\r\n        );\r\n\r\n        setCampaigns([...list!]);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Fragment>\r\n                <DataTable\r\n                    initialValues={collection?.campaigns!}\r\n                    onInputChange={(value, columns) => OnInputChangeHandler(value, columns!)}\r\n                    columns={[\r\n                        { Text: 'Title', width: 2, key: \"title\" },\r\n                        { Text: 'Description', width: 5, key: \"description\" },\r\n                        { Text: 'Period Date', width: 3, key: \"periodDate\", textAlign: \"center\" },\r\n                        { Text: 'Action', width: 2, key: \"action\", textAlign: \"center\" }\r\n                    ]}>\r\n                    {(data, index) =>\r\n                        <Table.Row key={data.id}>\r\n                            <Table.Cell width={2}>\r\n                                {data.title}\r\n                            </Table.Cell>\r\n                            <Table.Cell width={5}>\r\n                                {data.description}\r\n                            </Table.Cell>\r\n                            <Table.Cell width={3} textAlign='center'>{`${toDateFormat(data.dateFrom)} - ${toDateFormat(data.dateTo)}`}</Table.Cell>\r\n                            <Table.Cell width={2} textAlign='center'>\r\n                                <Button.Group size=\"mini\">\r\n                                    <Button icon='eye' color='orange'  onClick={() => viewClick(data.id!)} />\r\n                                    <Button icon='pencil' color=\"blue\" onClick={() => editClick(data.id!)} />\r\n                                    <Button icon='trash' color='red' onClick={() => deleteClick(data.id!)} />\r\n\r\n                                </Button.Group>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    }\r\n                </DataTable>\r\n            </Fragment>\r\n        </Fragment>\r\n    )\r\n});","import { useField } from \"formik\";\r\nimport  DatePicker,{ ReactDatePickerProps } from \"react-datepicker\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\nexport default function DateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field,meta,helpers] = useField(props.name!);\r\n\r\n    return(\r\n        <Form.Field>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { Formik,Form } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport { Button, Grid, Icon } from \"semantic-ui-react\";\r\nimport DateInput from \"../../components/Inputs/DateInput\";\r\nimport { FormikPlainTextArea, FormikTextField } from \"../../components/Inputs/FormInputs\";\r\nimport { ModalForm, useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { CampaignFormValue, ICampaignModel } from \"../../models/CampaignModel\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\ninterface IProps {\r\n    handleChanged: (id?: string) => void,\r\n    handleCancel: () => void\r\n    campaignSingle: CampaignFormValue\r\n}\r\n\r\n\r\n\r\nexport default observer(function CampaignModal({handleChanged,handleCancel, campaignSingle} : IProps) {\r\n\r\n    const { campaignStore } = useStore();\r\n    const {closeModal} = useModal();\r\n    const [campaign, setCampaign] = useState<CampaignFormValue>(campaignSingle);\r\n    \r\n    useEffect(() => {\r\n        setCampaign(campaignSingle);\r\n    },[campaignSingle])\r\n\r\n    \r\n    const handleSave = (value: CampaignFormValue) => {\r\n        campaignStore.saveAsync(value!).then((resp) => {\r\n            handleChanged(resp ? resp.id : \"\");\r\n        });\r\n    }\r\n\r\n  \r\n    return (\r\n        <>\r\n           <ModalForm name=\"campaignEntry\"  title=\"Campaign Entry\" modalSize=\"large\">\r\n                <Formik \r\n                    initialValues={campaign}\r\n                    onSubmit={(values) => {handleSave(values)}}>\r\n                    {({dirty}) =>(\r\n                        <Form className='ui form'>\r\n                            <Grid>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width={14}>\r\n                                        <FormikTextField name='title' label=\"Title\"   />\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width={14}>\r\n                                        <FormikPlainTextArea name='description' label=\"Description\" />\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                            <div className=\"two fields\" style={{marginTop: \"10px\"}}>\r\n                                <DateInput \r\n                                    placeholderText=\"Date From\"\r\n                                    name=\"dateFrom\"\r\n                                    dateFormat={\"MMMM d, yyyy \"}\r\n                                />\r\n                                 <DateInput \r\n                                    placeholderText=\"Date To\"\r\n                                    name=\"dateTo\"\r\n                                    dateFormat={\"MMMM d, yyyy \"}\r\n                                />\r\n                            </div>\r\n                            <div className=\"right\">\r\n                                <Button positive disabled={!dirty} type=\"submit\">Save</Button>\r\n                                <Button negative  type=\"submit\" onClick={handleCancel}>Cancel</Button>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n           </ModalForm>\r\n        </>\r\n    )\r\n});","import { Fragment } from \"react\";\r\nimport { Card, Grid, Header, Icon } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\nconst CHeader = styled.div`\r\n    display:flex;\r\n    font-size: 24px;\r\n    padding: 0;\r\n    color: #303376;\r\n    \r\n`\r\n\r\nconst CBody = styled.div`\r\n    display:flex;\r\n    justify-content:center;\r\n    font-size: 44px;\r\n    padding: 25px 0;\r\n    color:#4f8f76\r\n    \r\n`\r\n\r\nexport default function CampaignScoreBoard() {\r\n    const {campaignStore: {collection}} = useStore();\r\n    return (\r\n        <Fragment>\r\n            <Grid columns={4}>\r\n                <Grid.Column>\r\n                    <Card>\r\n                        <Card.Content>\r\n                            <CHeader><Icon name=\"bullhorn\"/> SMS Activities</CHeader>\r\n                            <CBody>{collection?.totalSMSActivities}</CBody>\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Card>\r\n                        <Card.Content>\r\n                            <CHeader>\r\n                                <Icon name=\"mail\" />\r\n                                Email Activities\r\n                            </CHeader>\r\n                            <CBody>\r\n                                {collection?.totalEmailActivities}\r\n                            </CBody>\r\n                           \r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Card>\r\n                        <Card.Content>\r\n                            <CHeader><Icon name=\"facebook\" /> Social Post</CHeader>\r\n                            <CBody>{collection?.totalSocialPost}</CBody>\r\n                        </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Card>\r\n                    <Card.Content>\r\n                        <CHeader><Icon name=\"chrome\" /> Ecommerce Activities</CHeader>\r\n                        <CBody>{collection?.totalEcommerce}</CBody>\r\n                    </Card.Content>\r\n                    </Card>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Fragment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport { ModalAlert } from \"../../components/Modals/ModalAlert\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { CampaignFormValue, CampaignModel, ICampaignModel } from \"../../models/CampaignModel\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport CampaignList from \"./CampaignList\";\r\nimport CampaignModal from \"./CampaignModal\";\r\nimport CampaignScoreBoard from \"./CampaignScoreboard\";\r\n\r\nexport default observer(function CampaignDashboard() {\r\n    \r\n    const { campaignStore: { \r\n        loadAsync, \r\n        loading,\r\n        deleteAsync,\r\n        fetchSingleAsync } } = useStore();\r\n\r\n\r\n    const history = useHistory();\r\n    const { openModal,closeModal } = useModal();\r\n    const [campaignId,setCampaignId] = useState<string>(\"\");\r\n    const [campaign,setCampaign] = useState<CampaignFormValue>(new CampaignFormValue());\r\n\r\n    //get parameter\r\n   \r\n\r\n    useEffect(() => {\r\n        loadAsync();\r\n    }, [])\r\n\r\n\r\n    const refresh = (id? : string) => {\r\n        closeModal(\"campaignEntry\");\r\n\r\n        if(id !== \"\") {\r\n            history.push(`/activity/${id}/create`);\r\n        }\r\n        else {\r\n            loadAsync();\r\n        }\r\n        \r\n        setCampaign(new CampaignFormValue());\r\n    }\r\n\r\n    const onViewClickHandler = (id : string) => {\r\n        history.push(`/activity/${id}`);\r\n    }\r\n\r\n    const onEditClickHandler = (id: string) => {\r\n        \r\n        fetchSingleAsync(id)\r\n            .then((value) => {\r\n                setCampaign(value)\r\n                openModal(\"campaignEntry\");\r\n            }\r\n        )\r\n    }\r\n\r\n    const onCancelHandler = () => {\r\n        closeModal(\"campaignEntry\");\r\n        //setCampaign(new CampaignFormValue);\r\n    }\r\n\r\n    if (loading) return <LoaderComponent content='Loading' inverted={true} />\r\n\r\n    return (\r\n        <>\r\n            <Page color=\"red\">\r\n                <Page.Header title=\"Campaign\" description=\"Manage your campaign\" icon=\"bullhorn\">\r\n                    <Button.Group>\r\n                        <Button color=\"green\" size=\"mini\" onClick={() => { \r\n                                openModal(\"campaignEntry\")\r\n                            }}>\r\n                            <Icon name='add' />Create</Button>\r\n                    </Button.Group>\r\n                </Page.Header>\r\n                <Page.Content>\r\n                    <CampaignScoreBoard />\r\n                    <CampaignList \r\n                        viewClick={onViewClickHandler}\r\n                        deleteClick={(id) => {\r\n                            setCampaignId(id);\r\n                            openModal(\"deleteDlg\");\r\n                        }}\r\n                        editClick={onEditClickHandler} />\r\n                    <CampaignModal campaignSingle={campaign} handleChanged={refresh} handleCancel={onCancelHandler}/>\r\n                    <ModalAlert \r\n                        name=\"deleteDlg\" title=\"Delete Confirmation\" \r\n                        message=\"Do you want to Delete the campaign?\" \r\n                        clickOkButton={() => deleteAsync(campaignId)}\r\n                        />\r\n                </Page.Content>\r\n            </Page>\r\n        </>\r\n    )\r\n});\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport { Button, Header, Image, Item, Label, Table } from \"semantic-ui-react\";\r\nimport { ColumnType, DataTable } from \"../../components/DataTables/DataTable\";\r\nimport { IContactModel } from \"../../models/ContactModel\";\r\nimport { convertToTitleCase } from \"../../util/helper\";\r\n\r\n\r\ninterface Props {\r\n    contacts : IContactModel[],\r\n    onEditClick? : (id : string) => void,\r\n    onRemoveClick? : (id : string) => void\r\n}\r\n\r\n\r\n\r\nexport default observer(function ContactList({contacts,onEditClick,onRemoveClick} : Props) {\r\n    \r\n    const [contactData,setContactData] = useState<IContactModel[]>(contacts);\r\n\r\n    const OnInputChangeHandler = (value: string,columns: ColumnType[]) => {\r\n        const list = contacts.filter(item => \r\n            item['fullName']!.toString().indexOf(value) !== -1\r\n        );\r\n        setContactData([...list]);\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <Fragment >\r\n            <DataTable \r\n                initialValues={contactData} \r\n                onInputChange={(value,columns) => OnInputChangeHandler(value,columns!)}\r\n                columns={[\r\n                    {Text: 'Full Name',width:11, key:\"fullName\" },\r\n                    {Text: 'Location', width:3,key: \"location\"},\r\n                    {Text: 'Group', width: 2,key: \"groupTag\"},\r\n                    {Text: 'Action',width: 1,key: \"action\"}\r\n                ]}>\r\n                {(data,index) => (\r\n                    <>\r\n                        <Table.Row key={data.id}>\r\n                            <Table.Cell>\r\n                                <Header as='h4' image>\r\n                                    <Image src='/assets/lena.png' rounded size='mini' />\r\n                                    <Header.Content>\r\n                                        <Header.Subheader>{`${convertToTitleCase(data.title)} ${data.fullName}`}</Header.Subheader>\r\n                                    </Header.Content>\r\n                                </Header>\r\n                                <Item>\r\n                                    <Item.Content>\r\n                                        <strong>Email:</strong><span> {data.emailAddress}</span><br />\r\n                                        <span>Contact Number: {data.primaryContact}</span>\r\n                                    </Item.Content>\r\n                                </Item>\r\n                            </Table.Cell>\r\n                            <Table.Cell>{data.location}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <Label>{data.groupTag}</Label>\r\n                            </Table.Cell>\r\n                        \r\n                            <Table.Cell>\r\n                                <Button.Group size=\"mini\">\r\n                                    <Button icon='pencil' color=\"purple\" onClick={() => onEditClick && onEditClick(data.id)}/>\r\n                                    <Button icon='trash' color=\"red\" onClick={() => onRemoveClick && onRemoveClick(data.id)} />\r\n                                </Button.Group>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    </>\r\n                )}\r\n            </DataTable>\r\n\r\n        </Fragment>\r\n    )\r\n});","\r\nimport { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { ModalForm, useModal } from \"../../components/Modals/ModalContainer\"\r\nimport { useStore } from \"../../stores/store\";\r\n\r\ninterface IFormRequest {\r\n    file?: File\r\n}\r\n\r\ninterface IProps {\r\n    onSuccess: () => void\r\n}\r\n\r\nexport default observer(function ImportModal({onSuccess} : IProps) {\r\n    const {closeModal} = useModal();\r\n    const [request,setRequest] = useState<IFormRequest>({ file: undefined});\r\n    const {contactStore: {fileUpload}} = useStore();\r\n\r\n    const uploadFile = (file?: File) => {\r\n        if(file) \r\n            fileUpload(file).then(() => {\r\n                console.log(\"hellow\");\r\n                onSuccess();\r\n            });\r\n    }\r\n\r\n    return (\r\n        <ModalForm name=\"contactUpload\" title=\"Contact CSV Upload\" >\r\n            <Formik \r\n                initialValues={request!}\r\n                onSubmit={values => uploadFile(values.file)}\r\n                >\r\n                    {({handleSubmit,setFieldValue,dirty}) => \r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Field>\r\n                                <input type=\"file\" name=\"file\" onChange={(e) => {\r\n                                    setFieldValue(\"file\",(e.currentTarget.files && e.currentTarget.files[0]))\r\n                                    dirty = true;\r\n                                }} />\r\n                            </Form.Field>\r\n                            <div className=\"right\">\r\n                                <Button positive disabled={!dirty} type=\"submit\" >Upload</Button>\r\n                                <Button negative  onClick={() => closeModal(\"contactUpload\")}>Cancel</Button>\r\n                            </div>\r\n                        </Form>\r\n                    }\r\n                    \r\n                    \r\n                </Formik>\r\n        </ModalForm>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toast\";\r\nimport { Button, Grid, Icon, Input } from \"semantic-ui-react\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport ContactList from \"./ContactList\";\r\nimport ImportModal from \"./ImportModal\";\r\n\r\n\r\n\r\nexport default observer(function ContactDashboard() {\r\n\r\n    const { contactStore,userStore} = useStore();\r\n    const history = useHistory();\r\n    const {openModal,closeModal} = useModal();\r\n\r\n    const { fetchContactsAsync, getLoading, getContacts } = contactStore;\r\n\r\n    useEffect(() => {\r\n\r\n        fetchContactsAsync().then(() => {\r\n            console.log(userStore.current?.roles[0]);\r\n        });\r\n        \r\n    }, [fetchContactsAsync]);\r\n\r\n    const refresh = () => {\r\n        \r\n        fetchContactsAsync();\r\n        closeModal(\"contactUpload\");\r\n    }\r\n\r\n    \r\n    const handleTransaction = (id?: string | undefined) => id ? history.push(`/contact/${id}`) :\r\n        history.push(`/contact-create`);\r\n\r\n    if (getLoading) return <LoaderComponent content=\"Loading\" inverted={true} />\r\n\r\n\r\n    return (\r\n      <>\r\n        <Page color=\"yellow\">\r\n          <Page.Header\r\n            title=\"Contact\"\r\n            description=\"Manage your customer contacts\"\r\n            icon=\"user outline\"\r\n          >\r\n            <Button.Group size=\"mini\">\r\n              <Button\r\n                color=\"green\"\r\n                size=\"mini\"\r\n                onClick={() => handleTransaction()}\r\n              >\r\n                <Icon name=\"add\" />\r\n                Add\r\n              </Button>\r\n              <Button\r\n                color=\"blue\"\r\n                size=\"mini\"\r\n                onClick={() => openModal(\"contactUpload\")}\r\n              >\r\n                Import\r\n              </Button>\r\n            </Button.Group>\r\n          </Page.Header>\r\n          <Page.Content>\r\n            <Grid>\r\n              <Grid.Row>\r\n                <Grid.Column>\r\n                  <ContactList\r\n                    contacts={getContacts!}\r\n                    onEditClick={(id: string) => handleTransaction(id)}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n            <ImportModal onSuccess={refresh} />\r\n          </Page.Content>\r\n        </Page>\r\n      </>\r\n    );\r\n});","import { Form, Formik } from \"formik\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, DropdownItemProps, Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport { FormikSelect, FormikTextField } from \"../../components/Inputs/FormInputs\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport ContactFormValue, { IContactModel } from \"../../models/ContactModel\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\n\r\nconst titleOptions : DropdownItemProps[] = [\r\n    {key: 1, value: 'mr',text: 'Mr.'},\r\n    {key: 2, value: 'ms',text: 'Miss'},\r\n    {key: 3, value: 'mrs',text: 'Mrs.'},\r\n]\r\n\r\n\r\n\r\nconst genderOptions : DropdownItemProps[] = [\r\n    {key: 1, value: 'male',text: 'Male'},\r\n    {key: 2, value: 'female',text: 'Female'}\r\n]\r\n\r\n\r\n\r\nexport default function ContactEntry() {\r\n\r\n    const { id } = useParams<{id: string}>();\r\n\r\n    const history = useHistory();\r\n    const [contactEntry,setContactEntry] = useState<ContactFormValue>(new ContactFormValue());\r\n    const {contactStore} = useStore();\r\n    const {findContactAsync,getLoading,saveContactAsync} = contactStore;\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(id)  findContactAsync(id).then(contact => \r\n                        setContactEntry(new ContactFormValue(contact)));\r\n        \r\n    },[id,findContactAsync])\r\n\r\n    function handleSave(values : IContactModel) {\r\n        saveContactAsync(values).then(() => history.push('/contact'));\r\n    }\r\n\r\n    function handleClose() {\r\n        history.push('/contact');\r\n    }\r\n    \r\n    if(getLoading) return <LoaderComponent content=\"Loading\" inverted={true} />\r\n\r\n    return(\r\n        <Segment color='yellow'>\r\n            <Grid style={{ padding: '5px 0' }}>\r\n                <Grid.Column width={14}>\r\n                    <Header as='h2'>\r\n                        <Icon name='user outline' />\r\n                        <Header.Content>\r\n                            Customer Contact Form - {contactEntry.firstName}\r\n                            <Header.Subheader>Enter Contact</Header.Subheader>\r\n                        </Header.Content>\r\n                    </Header>\r\n                </Grid.Column>\r\n            </Grid>\r\n            <Grid>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Formik initialValues={contactEntry}\r\n                            enableReinitialize\r\n                            onSubmit={(values) => handleSave(values)}>\r\n                                {({handleSubmit,isValid,dirty}) => (\r\n                                    <Form className='ui form'>\r\n                                        <div className=\"two fields\">\r\n                                            <FormikSelect name='title' label=\"Title\"  options={titleOptions}  />\r\n                                        </div>\r\n                                        <div className=\"three fields\">\r\n                                            <FormikTextField name='firstName' label=\"First Name\"  />\r\n                                            <FormikTextField name='middleName' label=\"Middle Name\"  />\r\n                                            <FormikTextField name='lastName' label=\"Last Name\"  />\r\n                                        </div>\r\n                                        <div className=\"three fields\">\r\n                                            <FormikSelect name='gender' label=\"Gender\"  \r\n                                                options={genderOptions} placeholder=\"Select Gender\"  />\r\n                                            <FormikTextField name='groupTag' label=\"Group Tag\" /> \r\n                                        </div>\r\n                                        <div className=\"three fields\">\r\n                                            <FormikTextField name=\"mobileNo\" label=\"Mobile No *\" />\r\n                                            <FormikTextField name=\"primaryContact\" label=\"Primary Contact *\"  />\r\n                                            <FormikTextField name=\"emailAddress\" label=\"Email Address *\"  />\r\n                                        </div>\r\n                                        <div className=\"three fields\">\r\n                                            <FormikTextField name=\"location\" label=\"Location \"  />\r\n                                        </div>\r\n                                        <div className=\"left\">\r\n                                            <Button positive disabled={!dirty} type=\"subimt\">Save</Button>\r\n                                            <Button negative onClick={handleClose}>Close</Button>\r\n                                        </div>\r\n                                    </Form>\r\n                                )}\r\n                        </Formik>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n\r\n    )\r\n}","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\n\r\nexport default function PageNotFound() {\r\n    return(\r\n        <Segment placeholder>\r\n        <Header icon>\r\n            <Icon name=\"search\" />\r\n            Oops - we've looked for everywhere and couldn't find\r\n        </Header>\r\n        <Segment.Inline>\r\n            <Button as={Link} to=\"/campaign\" primary >\r\n                Redirect to Campaign\r\n            </Button>\r\n        </Segment.Inline>\r\n    </Segment>\r\n\r\n    )\r\n}","import internal from \"stream\";\r\n\r\nexport interface IChannel {\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    type: string,\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    apiSecretKey: string,\r\n    header:string,\r\n    host: string,\r\n    port: number,\r\n    userName: string,\r\n    password: string,\r\n    phoneNo: string\r\n}\r\n\r\nexport class ChannelModel implements IChannel {\r\n    id: string = \"\";\r\n    title: string = \"\";\r\n    description: string = \"\";\r\n    type: string = \"\";\r\n    baseUrl: string = \"\";\r\n    apiKey: string = \"\";\r\n    apiSecretKey: string = \"\";\r\n    header: string = \"\";\r\n    host: string = \"\";\r\n    port: number = 0;\r\n    userName: string = \"\";\r\n    password: string = \"\";\r\n    phoneNo: string = \"\";\r\n\r\n    /**\r\n     *\r\n     */\r\n     constructor(init? : IChannel) {\r\n        if(init)\r\n            Object.assign(this,init);\r\n    }\r\n\r\n}","import { Form, Formik } from \"formik\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { FormikTextField } from \"../../components/Inputs/FormInputs\";\r\nimport { ModalForm, useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { ChannelModel, IChannel } from \"../../models/ChannelModel\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { useCallback } from \"react\";\r\n\r\n\r\ninterface IProps {\r\n    onChanges? : () => void,\r\n    \r\n    channel: ChannelModel\r\n}\r\n\r\nexport default function SettingModal({channel,onChanges} : IProps) {\r\n    const {channelStore: {saveAsync}} = useStore();\r\n\r\n    const handleSave = (channel: IChannel) => {\r\n        saveAsync(channel).then(() => {\r\n            onChanges && onChanges();\r\n        });\r\n    };\r\n    \r\n    const {closeModal} = useModal();\r\n\r\n    return(\r\n        <ModalForm\r\n            title=\"Channel Setting\"\r\n            name=\"settingModal\"\r\n            modalSize=\"large\"\r\n        >\r\n            <Formik\r\n               initialValues={channel}\r\n               onSubmit={values => handleSave(values)} \r\n            >\r\n                {({dirty}) =>\r\n                        (\r\n                    <Form className=\"ui equal width form\">\r\n                        <FormikTextField name=\"title\" type=\"text\" label=\"Title\" holderClassName=\"sixteen wide field\" />\r\n                    \r\n                        <FormikTextField name=\"description\" type=\"text\" label=\"Description\" holderClassName=\"sixteen wide field\" />\r\n                        \r\n                    \r\n                        <div className=\"inline fields\">\r\n                            <FormikTextField name=\"type\" label=\"Type\" holderClassName=\"four wide field\" />\r\n                            <FormikTextField name=\"baseUrl\" label=\"URL\" holderClassName=\"nine wide field\" />\r\n                        </div>\r\n                        <div className=\"inline  fields\">\r\n                            <FormikTextField name=\"apiKey\" type=\"text\" label=\"Key\" holderClassName=\"eight wide field\" />\r\n                            <FormikTextField name=\"apiSecretKey\" type=\"text\" label=\"Secret\" holderClassName=\"eight wide field\"/>\r\n                        </div>\r\n                        <FormikTextField name=\"header\" type=\"text\" label=\"Header\" />\r\n                        <div className=\"fields\">\r\n                            <FormikTextField name=\"host\" label=\"Host\" holderClassName=\"six wide field\" />\r\n                            <FormikTextField name=\"port\" label=\"Port\" holderClassName=\"three wide field\" />\r\n                            <FormikTextField name=\"phoneNo\" label=\"Phone No\" holderClassName=\"seven wide field\" />\r\n                        </div>\r\n                        <div className=\"inline fields\">\r\n                            <FormikTextField name=\"userName\" label=\"User Name\" holderClassName=\"eight wide field\"/>\r\n                            <FormikTextField name=\"password\" label=\"Password\" type=\"password\"  holderClassName=\"eight wide field\"/>\r\n                        </div>\r\n                        <div>\r\n                            <Button positive disabled={!dirty} type=\"submit\">Save</Button>\r\n                            <Button negative  type=\"button\" onClick={() => closeModal(\"settingModal\") } >Cancel</Button>\r\n                        </div>\r\n                </Form>\r\n                        )\r\n                    }\r\n            </Formik>\r\n        </ModalForm>\r\n    )\r\n}","import { useCallback, useEffect, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { ChannelModel } from \"../../models/ChannelModel\";\r\nimport SettingModal from \"./SettingModal\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport default observer(function SettingDashboard() {\r\n  const {\r\n    channelStore: { fetchAllAsync, channels, loading },\r\n  } = useStore();\r\n\r\n  const { openModal, closeModal } = useModal();\r\n  const [channel, setChannel] = useState<ChannelModel>(new ChannelModel());\r\n\r\n  useEffect(() => {\r\n    fetchAllAsync();\r\n  }, [fetchAllAsync]);\r\n\r\n  const onEditHandler = (channel: ChannelModel) => {\r\n    setChannel(channel);\r\n    openModal(\"settingModal\");\r\n  };\r\n\r\n  const handleChange = useCallback(() => {\r\n    fetchAllAsync();\r\n    closeModal(\"settingModal\");\r\n  }, [channel]);\r\n\r\n  const handleAdd = () => {\r\n    setChannel(new ChannelModel());\r\n    openModal(\"settingModal\");\r\n  }\r\n\r\n  if (loading) return <LoaderComponent content=\"Loading\" inverted={true} />;\r\n\r\n  return (\r\n    <>\r\n      <Page color=\"teal\">\r\n        <Page.Header\r\n          title=\"Settings\"\r\n          description=\"Manage Channel Settings\"\r\n          icon=\"cog\"\r\n        >\r\n            <Button.Group size=\"mini\">\r\n\r\n          <Button color=\"green\"  onClick={() => handleAdd()}>\r\n            <Icon name=\"add\" /> Add\r\n          </Button>\r\n          </Button.Group>\r\n        </Page.Header>\r\n        <Page.Content>\r\n          <Card.Group>\r\n            {channels &&\r\n              channels.map((channel: ChannelModel) => (\r\n                <Card>\r\n                  <Card.Content>\r\n                    <Card.Header>{channel.title}</Card.Header>\r\n                    <Card.Meta>Type: {channel.type}</Card.Meta>\r\n                    <Card.Description style={{ padding: \"10px 0\" }}>\r\n                      {channel.description}\r\n                    </Card.Description>\r\n                  </Card.Content>\r\n                  <div\r\n                    className=\"ui bottom attached button\"\r\n                    onClick={() => onEditHandler(channel)}\r\n                  >\r\n                    <Icon name=\"pencil\"></Icon> Edit\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n          </Card.Group>\r\n          <SettingModal channel={channel} onChanges={handleChange} />\r\n        </Page.Content>\r\n      </Page>\r\n    </>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Button, Icon, Image, Label, Table } from \"semantic-ui-react\";\r\nimport { ColumnType, DataTable } from \"../../components/DataTables/DataTable\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { ITaskModel } from \"../../models/TaskModel\";\r\nimport { useState } from \"react\";\r\n\r\n\r\ninterface IProps {\r\n    onEdit: (taskId: string) => void\r\n}\r\n\r\nexport default observer(function TaskList({ onEdit }: IProps) {\r\n    const { taskStore: { tasks } } = useStore();\r\n    const [taskList, setTaskList] = useState<ITaskModel[]>(tasks!);\r\n\r\n    const OnInputChangeHandler = (value: string, columns: ColumnType[]) => {\r\n        console.log(value);\r\n        const list = tasks!.filter(item =>\r\n            item['title']!.toString().indexOf(value) !== -1\r\n        );\r\n        setTaskList([...list]);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DataTable\r\n                initialValues={taskList}\r\n                onInputChange={(value, columns) => OnInputChangeHandler(value, columns!)}\r\n                columns={[\r\n                    { Text: 'Title', width: 11, key: \"title\" },\r\n                    { Text: 'Assigned To', width: 3, key: \"subTask\" },\r\n                    { Text: 'Total Task', width: 2, key: \"totalSubTaskCount\" },\r\n                    { Text: 'Status', width: 1, key: \"close\" },\r\n                    { Text: 'Action', width: 1, key: \"action\" }\r\n                ]}\r\n            >\r\n                {(data, index) =>\r\n                    <Table.Row key={index}>\r\n                        <Table.Cell>{data.title}</Table.Cell>\r\n                        <Table.Cell>{data.subTasks && data.users!.map((user, index) => (\r\n                            <Label image size=\"small\" key={index}>\r\n                                <Image src='assets/lena.png' />\r\n                                {user}\r\n                                <Icon name='delete' />\r\n                            </Label>\r\n                        ))}</Table.Cell>\r\n                        <Table.Cell>\r\n                            {data.totalSubTaskCount}\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                            <Label color=\"red\" size=\"small\">{data.close ? \"close\" : \"open\"}</Label>\r\n                        </Table.Cell>\r\n                        <Table.Cell>\r\n                            <Button.Group>\r\n                                <Button icon='edit outline' color='green' onClick={() => onEdit(data.id!)}></Button>\r\n                                <Button icon='archive' color='blue'></Button>\r\n                            </Button.Group>\r\n                        </Table.Cell>\r\n                    </Table.Row>\r\n                }\r\n            </DataTable>\r\n            \r\n        </>\r\n    )\r\n});","import { Form, Formik } from \"formik\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport { useState } from \"react\"\r\nimport { Button } from \"semantic-ui-react\"\r\nimport { FormikTextField } from \"../../components/Inputs/FormInputs\"\r\nimport { ModalForm, useModal } from \"../../components/Modals/ModalContainer\"\r\nimport { ITaskModel } from \"../../models/TaskModel\"\r\nimport { useStore } from \"../../stores/store\"\r\n\r\ninterface Props {\r\n    onChanged: () => void\r\n}\r\n\r\nconst TaskModal = ({onChanged} : Props) => {\r\n\r\n    const {closeModal} = useModal();\r\n    const {taskStore : {createTaskAsync}} = useStore();\r\n    const [taskModel,setTaskModel] = useState<ITaskModel>({title: \"\",close:false});\r\n\r\n    const createTask = (task: ITaskModel) => \r\n                        createTaskAsync(task).then(() => onChanged());\r\n\r\n    return(\r\n        <ModalForm name=\"taskForm\" title=\"Task Entry\" modalSize=\"small\">\r\n            <Formik\r\n                initialValues={taskModel}\r\n                onSubmit={(values) => createTask(values)}>\r\n                <Form className=\"ui form\">\r\n                    <div className=\"one field\">\r\n                        <FormikTextField name=\"title\" label=\"Title\"/>\r\n                    </div>\r\n                    <div>\r\n                        \r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <Button positive content=\"Save\" type=\"submit\" />\r\n                        <Button negative content=\"Cancel\" type=\"button\" onClick={() => closeModal(\"taskForm\")} />\r\n                    </div>\r\n                </Form>\r\n            </Formik>\r\n        </ModalForm>\r\n    )\r\n}\r\n\r\nexport default observer(TaskModal)","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Grid, Icon, Input } from \"semantic-ui-react\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport TaskList from \"./TaskList\";\r\nimport TaskModal from \"./TaskModal\";\r\n\r\n\r\nexport default observer(function TaskDashboard() {\r\n\r\n    const { taskStore: { fetchAllAsync,loading },userStore: {current} } = useStore();\r\n    const {openModal,closeModal} = useModal();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {fetchAllAsync();}, [fetchAllAsync])\r\n\r\n    const refresh = () =>{\r\n        closeModal(\"taskForm\");\r\n        fetchAllAsync();\r\n    };\r\n\r\n    const onEditHandler = (taskId : string) => history.push(`/task/${taskId}`);\r\n    const onButtonAddDisabled  = (current && current.roles.indexOf(\"manager\"))\r\n\r\n    if(loading) return <LoaderComponent content=\"loading\" inverted  />\r\n\r\n    return (\r\n        <Page color=\"purple\">\r\n            <Page.Header title=\"Task\" description=\"Manage your tasks\" icon=\"calendar outline\">\r\n                {!onButtonAddDisabled && (\r\n                    <Button.Group size=\"small\">\r\n                        <Button color=\"green\" type=\"button\" onClick={() => openModal(\"taskForm\")} ><Icon name='add' />Add</Button>\r\n                    </Button.Group>\r\n                )}\r\n            </Page.Header>\r\n            <Page.Content>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <TaskList onEdit={(taskId) => onEditHandler(taskId)}/>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n                <TaskModal onChanged={refresh} />\r\n            </Page.Content>\r\n        </Page>\r\n    )\r\n});","import React from \"react\"\r\nimport { Button, Grid, Icon, Label, Segment, SemanticCOLORS } from \"semantic-ui-react\"\r\nimport styled from \"styled-components\"\r\n\r\n\r\n\r\nconst NoteContainer = styled.div`\r\n    color: #333;\r\n   \r\n    border: 1px solid #ccc;\r\n    background: #fafafa;\r\n    border-radius: 3px;\r\n    position: relative;\r\n    padding: 0 10px;\r\n    margin: 5px 0;\r\n    &::after {\r\n        content: '';\r\n        display: block;\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 5px;\r\n        background-color: ${props => props.color};\r\n        top: 0;\r\n        left: 0;\r\n        border-radius: 3px;\r\n    }\r\n    \r\n`\r\n\r\nconst NoteBody = styled.div`\r\n    padding: 20px 10px;\r\n    color: gray;\r\n    postion:relative;\r\n    min-height: 120px; \r\n    \r\n`\r\n\r\nconst NoteFooter = styled.div`\r\n    border-top: 1px solid #ccc;\r\n    \r\n    padding: 10px 5px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n`\r\n\r\n\r\ninterface IProps {\r\n    color: SemanticCOLORS,\r\n    content: string,\r\n    assignedTo: string,\r\n    assignedBy: string,\r\n    draggable?: boolean,\r\n    noteId: string,\r\n    isReassignActionEnabled?: boolean,\r\n    isDeleteActionEnabled?: boolean,\r\n    reAssignCallback?: () => void,\r\n    deleteCallback?: () => void\r\n}\r\n\r\nconst TaskNoteStyled = ({color,content,assignedTo,assignedBy,noteId,isDeleteActionEnabled,\r\n    isReassignActionEnabled,reAssignCallback,deleteCallback} : IProps) => {\r\n\r\n    const dragStartHandler = (event: React.DragEvent<HTMLDivElement>,data:string) => {\r\n        event.dataTransfer.setData('data',data);\r\n    }\r\n\r\n    \r\n    return(\r\n        <NoteContainer \r\n            color={color} \r\n            draggable={true} \r\n            onDragStart={(event) => dragStartHandler(event,noteId)}>\r\n            <NoteBody>\r\n                <p>{content}</p>\r\n            </NoteBody>\r\n            <NoteFooter>\r\n                <Label><Icon name=\"user outline\" />Assigned To: {assignedTo}</Label>\r\n                <Button.Group size=\"mini\">\r\n                    {isReassignActionEnabled && \r\n                    <Button basic size=\"mini\" positive onClick={() => reAssignCallback && reAssignCallback()}>Edit</Button>}\r\n                    {isReassignActionEnabled && \r\n                    <Button basic size=\"mini\" positive onClick={() => deleteCallback && deleteCallback()}>Delete</Button>}\r\n                </Button.Group>\r\n            </NoteFooter>\r\n        </NoteContainer>\r\n    )\r\n}\r\n\r\nconst TaskNote = ({color,content,assignedTo} : IProps) => {\r\n\r\n    return(\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Label  basic content={assignedTo} color={color}  />\r\n            </Segment>\r\n            <Segment inverted color={color} >\r\n                <Grid columns={2}>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={13}>{content}</Grid.Column>\r\n                        <Grid.Column width={1}>\r\n                            <Button icon=\"ellipsis horizontal\" size=\"mini\"/>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                \r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport {TaskNote,TaskNoteStyled}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useRef } from \"react\";\r\nimport { Card, Header, SemanticCOLORS } from \"semantic-ui-react\";\r\nimport { ISubTaskModel } from \"../../../models/TaskModel\";\r\nimport { useStore } from \"../../../stores/store\";\r\n\r\ninterface IProps {\r\n    title: string,\r\n    tag: string,\r\n    assignedTo: string,\r\n    panelColor: SemanticCOLORS,\r\n    showButton?: boolean,\r\n    onItemDrop: (subTaskId: string,tag:string) => void,\r\n    children: (subtask: ISubTaskModel, index: number,color: SemanticCOLORS) => React.ReactChild\r\n}\r\n\r\nconst useLoading = (tag: string,assignedTo: string) : ISubTaskModel[] | undefined => {\r\n    const {taskStore: {task}} = useStore();\r\n    if(task) {\r\n        if(task.subTasks && task.subTasks.length > 0) {\r\n            var filteredTask = task.subTasks.filter(item =>item.status.toLowerCase() === tag.toLowerCase());\r\n            //console.log(filteredTask);\r\n            return filteredTask;\r\n        }\r\n    }\r\n    else    \r\n        return []\r\n}\r\n\r\nconst TodoBoard : React.FC<IProps> = observer((props) => {\r\n    \r\n    const subTasks = useLoading(props.tag,props.assignedTo);\r\n    const dropZone = React.useRef<HTMLDivElement>(null);\r\n\r\n    const enableDropping=(event: React.DragEvent<HTMLDivElement>) =>{\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\r\n        event.preventDefault();\r\n        var targetId = event.dataTransfer.getData(\"data\");\r\n        props.onItemDrop(targetId,props.tag);\r\n    }\r\n   \r\n    return(\r\n        <div ref={dropZone} onDragOver={enableDropping} onDrop={handleDrop}>\r\n            <Card fluid color={props.panelColor} >\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        <Header \r\n                            content={props.title} \r\n                            color={props.panelColor} \r\n                            floated=\"left\"/>\r\n                    </Card.Header>\r\n                </Card.Content>\r\n                <Card.Content style={{minHeight: \"570px\"}}>\r\n                    {subTasks && subTasks.map((sub,index) => (\r\n                            props.children(sub,index,props.panelColor)\r\n                    ))}\r\n                </Card.Content>\r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport {TodoBoard};","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button, DropdownItemProps } from \"semantic-ui-react\";\r\nimport { FormikPlainTextArea, FormikSelect } from \"../../components/Inputs/FormInputs\";\r\nimport { ModalForm, useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { ISubTaskModel} from \"../../models/TaskModel\"\r\nimport { useStore } from \"../../stores/store\";\r\n\r\ninterface IProps  {\r\n    onChange: () => void,\r\n    subTask?: ISubTaskModel\r\n}\r\n\r\n\r\nexport const AddTaskForm = observer((props: IProps) => {\r\n    \r\n    const {closeModal} = useModal();\r\n    const {\r\n        userStore : {fetchAllUserAsync,current},\r\n        taskStore} = useStore();\r\n\r\n    const [userOptions,setUserOptions] = useState<DropdownItemProps[]>([]);\r\n\r\n    useEffect(() => {\r\n        if(current?.roles.find(item => item == \"manager\")) {\r\n            fetchAllUserAsync().then((users) => {\r\n                if(users) {\r\n                    \r\n                    if(userOptions.length === 0) {\r\n                        users.forEach(user => \r\n                                setUserOptions((options) => [...options, {key: user.username, value : user.username, text: user.username}]))\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },[fetchAllUserAsync,props.subTask,current])\r\n\r\n    const addSubTaskHandler = (subTask: ISubTaskModel) => {\r\n        taskStore.addSubTask(subTask).then(() => {\r\n            closeModal(\"addTaskForm\");\r\n            props.onChange();\r\n        })\r\n    }\r\n    return(\r\n        <ModalForm name=\"addTaskForm\" title=\"Add Task Detail\">\r\n            \r\n            <Formik \r\n            initialValues={props.subTask!}\r\n            onSubmit={(values) => addSubTaskHandler(values)}>\r\n                {({dirty}) => (\r\n                    <Form className=\"ui form\">\r\n                        <div className=\"one field\">\r\n                            <FormikPlainTextArea name=\"task\" label=\"Task\" rows={12} />\r\n                        </div>\r\n                        <div>\r\n                            {userOptions.length > 0 && \r\n                                <FormikSelect name=\"assignedTo\" options={userOptions} label=\"Assigned To\" />}\r\n                        </div>\r\n                        <div className=\"right\">\r\n                            <Button positive disabled={!dirty} content=\"Save\" type=\"submit\" />\r\n                            <Button negative content=\"Cancel\" type=\"button\" onClick={() => closeModal(\"taskForm\")} />\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </ModalForm>\r\n    )\r\n\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, DropdownItemProps, DropdownProps, Grid } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport { TodoBoard,TaskNoteStyled } from \"./Components/\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport { AddTaskForm } from \"./AddTaskForm\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { ISubTaskModel } from \"../../models/TaskModel\";\r\n\r\n\r\n\r\n\r\nexport default observer(function TaskDistribution() {\r\n\r\n    const { userStore, taskStore: { fetchTaskAsync, task, loading,updateSubTask } } = useStore();\r\n    const [selected,setSelected] = useState<string | undefined>(undefined);\r\n    const { id } = useParams<{ id: string }>();\r\n    const {openModal} = useModal();\r\n\r\n    const [subTask,setSubTask] = useState<ISubTaskModel>({\r\n        id: \"\",\r\n        task : \"\",\r\n        assignedTo: \"\",\r\n        assignedBy: \"\",\r\n        status: \"\",\r\n        markDelete: false\r\n    })\r\n\r\n    const user = userStore.current;\r\n\r\n\r\n    useEffect(() => {\r\n        fetchTaskAsync(id,selected);\r\n    }, [fetchTaskAsync,selected])\r\n\r\n   \r\n    const handleUpdateTask = (subTaskId: string,status: string) => {\r\n        updateSubTask(subTaskId,\"status\",status).then(() => refresh());\r\n    }\r\n\r\n    const handleDeleteTask = (subTaskId: string,markDelete: boolean) => {\r\n        updateSubTask(subTaskId,\"markDelete\",markDelete).then(() => refresh());;\r\n    }\r\n\r\n    const reAssigned = (subTask : ISubTaskModel) => {\r\n        setSubTask(subTask);\r\n        openModal(\"addTaskForm\")\r\n    }\r\n\r\n   \r\n\r\n    const refresh = () => {\r\n        fetchTaskAsync(id,selected);\r\n    }\r\n\r\n    if (loading) return <LoaderComponent content=\"loading\" inverted />\r\n\r\n    return (\r\n        <>\r\n            <Page color=\"purple\">\r\n                <Page.Header title={task?.title!} description=\"\">\r\n                    <Button positive  size=\"small\" content=\"Add\" onClick={()=> openModal(\"addTaskForm\")} />\r\n                </Page.Header>\r\n                <Page.Content>\r\n                    <Grid>\r\n                        <Grid.Row columns={3}>\r\n                            <Grid.Column>\r\n                                <TodoBoard\r\n                                    title=\"TODO Task\"\r\n                                    tag=\"Todo\"\r\n                                    assignedTo={selected!}\r\n                                    panelColor='red' showButton={true}\r\n                                    onItemDrop={handleUpdateTask}\r\n                                    >\r\n                                    {(sub, index, color) =>\r\n                                        <>\r\n                                         <TaskNoteStyled \r\n                                            draggable={true} \r\n                                            noteId={sub.id!} \r\n                                            assignedTo={sub.assignedTo} \r\n                                            assignedBy={sub.assignedBy}\r\n                                            color={color} \r\n                                            content={sub.task} key={index}\r\n                                            reAssignCallback={() => reAssigned(sub)}\r\n                                            deleteCallback={() => handleDeleteTask(sub.id!,true)}\r\n                                            isReassignActionEnabled={user?.roles[0] === \"manager\" || user?.username === sub.assignedBy}\r\n                                            />\r\n\r\n                                        </>\r\n                                    }\r\n                                </TodoBoard>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <TodoBoard\r\n                                    title=\"Doing Task\"\r\n                                    tag=\"Doing\"\r\n                                    assignedTo={selected!}\r\n                                    panelColor='orange' showButton={true}\r\n                                    onItemDrop={handleUpdateTask}\r\n                                    >\r\n                                    {(sub, index, color) =>\r\n                                        <TaskNoteStyled \r\n                                            noteId={sub.id!} assignedTo={sub.assignedTo} \r\n                                            assignedBy={sub.assignedBy}\r\n                                            color={color} content={sub.task} key={index} \r\n                                            reAssignCallback={() => reAssigned(sub)}\r\n                                            deleteCallback={() => handleDeleteTask(sub.id!,true)}\r\n                                            isReassignActionEnabled={user?.roles[0] === \"manager\" || user?.username === sub.assignedBy}\r\n                                            />\r\n                                    }\r\n                                </TodoBoard>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <TodoBoard\r\n                                    title=\"Done Task\"\r\n                                    tag=\"Done\"\r\n                                    assignedTo={selected!}\r\n                                    panelColor='green' showButton={true}\r\n                                    onItemDrop={handleUpdateTask}\r\n                                    >\r\n                                    {(sub, index, color) =>\r\n                                        <TaskNoteStyled \r\n                                        noteId={sub.id!} assignedTo={sub.assignedTo} \r\n                                        assignedBy={sub.assignedBy}\r\n                                        color={color} content={sub.task} key={index} \r\n                                        reAssignCallback={() => reAssigned(sub)}\r\n                                        deleteCallback={() => handleDeleteTask(sub.id!,true)}\r\n                                        isReassignActionEnabled={user?.roles[0] === \"manager\" || user?.username === sub.assignedBy}\r\n                                        />\r\n                                    }\r\n                                </TodoBoard>\r\n                            </Grid.Column>\r\n\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Page.Content>\r\n            </Page>\r\n            <AddTaskForm onChange={refresh} subTask={subTask}/>\r\n        </>\r\n    )\r\n});","import { Form, Formik } from \"formik\"\r\nimport { Button, DropdownItemProps } from \"semantic-ui-react\";\r\nimport { FormikSelect, FormikTextField } from \"../../components/Inputs/FormInputs\";\r\nimport { ModalForm, useModal } from \"../../components/Modals/ModalContainer\"\r\nimport { IRegister, IUser } from \"../../models/User\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\ninterface IProps {\r\n    onCancel?: () => void\r\n    onChange: () => void\r\n    userData?: IUser\r\n}\r\n\r\nconst roleOptions : DropdownItemProps[] = [\r\n    {text: 'Admin', value: 'admin'},\r\n    {text: 'Manager', value: 'manager'},\r\n    {text: 'Staff', value: 'staff'},\r\n    {text: 'Sales', value: 'sales'},\r\n]\r\n\r\n\r\nexport const  UserFormModal = ({onCancel,onChange,userData}: IProps) => {\r\n    \r\n    const {userStore: {registerUserAsync,updateAsync}} = useStore();\r\n    const {closeModal} = useModal();\r\n    \r\n\r\n    const submitHandler = (values: IRegister) => {\r\n        \r\n        registerUserAsync(values).then(() => {\r\n            onChange();\r\n        })\r\n    }\r\n\r\n    return(\r\n        <ModalForm\r\n            name=\"userFormModal\"\r\n            title=\"User Registration\">\r\n            <Formik\r\n                initialValues={{\r\n                    id: (userData === undefined ? \"\" : userData.id),\r\n                    email: (userData === undefined ? \"\" : userData.email),\r\n                    username: (userData === undefined ? \"\" : userData.username),\r\n                    password: (userData === undefined ? \"\" : userData.password),\r\n                    displayName: (userData === undefined ? \"\" : userData.displayName),\r\n                    jobTitle: (userData === undefined ? \"\" : userData.jobTitle),\r\n                    department: (userData === undefined ? \"\" : userData.department),\r\n                    role: (userData === undefined ? \"\": userData.roles[0])\r\n                }}\r\n                onSubmit={(values) => {submitHandler(values)}}>\r\n                {({dirty}) => \r\n                    <Form className='ui form'>\r\n                        <FormikTextField name='username' label=\"User Name\" />\r\n                        <FormikTextField name='displayName' label='Display Name' />\r\n                        <FormikTextField name='email' label='Email' />\r\n                        <FormikTextField name='jobTitle' label='Job Title' />\r\n                        <FormikTextField name='department' label='Department' />\r\n                        <FormikTextField name=\"password\" label=\"Password\" type=\"password\" placeholder=\"Enter Password\" />\r\n                        <FormikSelect options={roleOptions} name=\"role\" label=\"Role\" />\r\n                        <div className=\"right\">\r\n                            <Button positive disabled={!dirty} type=\"submit\">Save</Button>\r\n                            <Button negative  type=\"submit\" onClick={() => closeModal(\"userFormModal\")}>Cancel</Button>\r\n                        </div>\r\n                    </Form>\r\n                }\r\n            </Formik>\r\n        </ModalForm>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { Button, Label, Table } from \"semantic-ui-react\";\r\nimport { ColumnType, DataTable } from \"../../components/DataTables/DataTable\";\r\nimport { IUser, UserModel } from \"../../models/User\";\r\n\r\ninterface IProps {\r\n    data: UserModel[],\r\n    onEdit?: (user : IUser) => void,\r\n    onRemove?: (user: IUser) => void\r\n}\r\n\r\nexport default observer(function UserList({data,onEdit,onRemove}: IProps) {\r\n\r\n    const [userCollection,setUserCollection] = useState<UserModel[]>(data);\r\n    \r\n\r\n    const onInputChangeHandler = (value: string,columns: ColumnType[]) => {\r\n        const list = data.filter(item => \r\n            item['displayName']!.toString().indexOf(value) !== -1\r\n        );\r\n        setUserCollection([...list]);\r\n    }\r\n\r\n   \r\n\r\n    return(\r\n        <DataTable\r\n            initialValues={userCollection}\r\n            onInputChange={(value,columns) => onInputChangeHandler(value,columns!)}\r\n            columns={[\r\n                {Text: \"Name\", width: 11, key: \"displayName\"},\r\n                {Text: \"Job Title\", width: 5, key: \"jobTitle\"},\r\n                {Text: \"Department\", width: 5, key: \"department\"},\r\n                {Text: \"Role\", width: 8, key:\"roles\"}\r\n            ]}\r\n        >\r\n            {(item,index) => \r\n                <Table.Row key={index}>\r\n                    <Table.Cell>{item.displayName}</Table.Cell>\r\n                    <Table.Cell>{item.jobTitle} </Table.Cell>\r\n                    <Table.Cell>{item.department} </Table.Cell>\r\n                    <Table.Cell>\r\n                        {item.roles.map((role,index) => <Label key={index}>{role}</Label> )} \r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Button.Group size=\"mini\">\r\n                            <Button icon='pencil' color=\"purple\" onClick={() => onEdit && onEdit(item)}/>\r\n                            <Button icon='trash' color=\"red\" onClick={() => onRemove && onRemove(item)} />\r\n                        </Button.Group>\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            }\r\n        </DataTable>\r\n    )\r\n});\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport LoaderComponent from \"../../components/Loader/LoaderComponent\";\r\nimport { useModal } from \"../../components/Modals/ModalContainer\";\r\nimport { IUser } from \"../../models/User\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { UserFormModal } from \"./UserFormModal\";\r\nimport UserList from \"./UserList\";\r\n\r\nexport default observer(function UserDashboard() {\r\n\r\n    const {userStore: {fetchUsersAsync,users,current,loading}} = useStore();\r\n    const {openModal,closeModal} = useModal();\r\n    const [user,setUser] = useState<IUser | undefined>();\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        fetchUsersAsync();\r\n    },[fetchUsersAsync]);\r\n\r\n    const handleOnChange = () => {\r\n        closeModal(\"userFormModal\");\r\n        fetchUsersAsync();\r\n    }\r\n\r\n    const onEditHandler = (value: IUser) => {\r\n        setUser(value);\r\n        openModal(\"userFormModal\");\r\n    }\r\n\r\n    if (loading) return <LoaderComponent content='Loading' inverted={true} />\r\n    return (\r\n        <>\r\n            <Page color=\"teal\">\r\n                <Page.Header title=\"Users\" description=\"Manage User Settings\" icon=\"user outline\">\r\n                    <Button.Group size=\"mini\">\r\n                        <Button color=\"green\" size=\"mini\"\r\n                            onClick={() => openModal(\"userFormModal\")} ><Icon name='add' />Add</Button>\r\n                    </Button.Group>\r\n                </Page.Header>\r\n                <Page.Content>\r\n                    <UserList data={users!} onEdit={onEditHandler} />\r\n                    <UserFormModal onChange={handleOnChange} userData={user}   />\r\n                </Page.Content>\r\n            </Page>\r\n\r\n        </>\r\n    )\r\n});\r\n\r\n","import { observer } from \"mobx-react-lite\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { Card, Icon, Image, List } from \"semantic-ui-react\"\r\nimport styled from \"styled-components\"\r\nimport { INotification } from \"../../models/NotificationModel\"\r\nimport { useStore } from \"../../stores/store\"\r\nimport { useTaskNotificationContext } from \"./TaskNotificationProvider\"\r\n\r\nconst NWrapper = styled.div`\r\npostion: relative;\r\ndisplay: flex;\r\njustify-content: center;\r\nz-index: 9999;\r\n`\r\nconst NHeader = styled.div`\r\n    width: 100%;\r\n    padding: 10px 5px;\r\n    background: #000;\r\n    color: white;\r\n`\r\nconst NCount = styled.div`\r\nposition: absolute;\r\ntop: 10px;\r\nright: 5px;\r\ncolor: white;\r\nbackground: red;\r\npadding: 3px;\r\nborder-radius: 5px;\r\n`\r\n\r\nconst NList = styled.div`\r\nposition:absolute;\r\nborder: 1px solid #ccc;\r\nz-index: 999;\r\ntop: 65px;\r\nright: 0;\r\nwidth: 300px;\r\nbackground: white;\r\nmin-height: 200px;\r\ncolor: #000;\r\n`\r\n\r\nconst NUList = styled.ul`\r\n    list-style:none;\r\n    display:flex;\r\n    flex-direction: column;\r\n    margin: 0;\r\n    padding:0;\r\n`\r\n\r\nconst NUListItem = styled.li`\r\n    padding: 15px 5px;\r\n    width: 100%;\r\n    &:hover {\r\n        background: #ccc;\r\n    }\r\n`\r\nconst NListBody = styled.div`\r\n    padding: 0;\r\n`\r\ninterface IProps {\r\n    onListClick: () => void\r\n}\r\n\r\n\r\nexport default observer(function TaskNotification({ onListClick }: IProps) {\r\n    const { notify, notified } = useTaskNotificationContext();\r\n    const { userStore: { fetchCurrent } } = useStore();\r\n    const [notifications, setNotifications] = useState<INotification[]>([]);\r\n    const [showStyle, setShowStyle] = useState<boolean>(false);\r\n\r\n    const setListStyle = (): object => {\r\n        return showStyle ? { display: \"block\" } : { display: \"none\" };\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (notified) {\r\n            fetchCurrent().then(user => {\r\n                setNotifications(user.notifications);\r\n            });\r\n            notify();\r\n        }\r\n    }, [notified])\r\n\r\n\r\n    return (\r\n        <>\r\n            <NWrapper>\r\n\r\n                <NCount>\r\n                    {notifications ? notifications.length : 0}\r\n                </NCount>\r\n                <Image src='/assets/bell.png' avatar onClick={() => setShowStyle(!showStyle)} />\r\n                <NList style={setListStyle()} >\r\n                    <NHeader>\r\n                        Notification\r\n                    </NHeader>\r\n                    <NListBody>\r\n                        <NUList>\r\n                            {notifications && notifications.map((notification, index) => (\r\n                                <NUListItem key={index} onClick={onListClick}>\r\n                                    <Icon name='bullhorn' size='large' />\r\n                                    {notification.description}\r\n                                </NUListItem>\r\n                            ))}\r\n                        </NUList>\r\n                    </NListBody>\r\n                </NList>\r\n            </NWrapper>\r\n        </>\r\n\r\n    )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\nimport TaskNotification from \"../components/Notifications/TaskNotification\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\nconst NotifContainer = styled.div`\r\n    position: relative;\r\n\r\n`\r\n\r\ninterface Props {\r\n    onButtonSidebarClick?: () => void | undefined\r\n}\r\n\r\nfunction Navbar({ onButtonSidebarClick }: Props) {\r\n    \r\n    const { userStore: { current, logout } } = useStore();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Menu inverted fixed=\"top\" style={{ marginBottom: '7em', zIndex: '999' }} className=\"blue-inverted\">\r\n            <Menu.Item>\r\n                <Image \r\n                    src='https://cdn.shopify.com/s/files/1/0394/2698/2055/files/NABCO_LOGOwhite_250x.png?v=1590742571' size=\"small\" />\r\n            </Menu.Item>\r\n            <Menu.Item position=\"right\">\r\n                <TaskNotification  onListClick={() => history.push('profile')} />\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <Image src='/assets/user.png' avatar spaced='right' />\r\n                <Dropdown pointing='top right' text={current?.displayName}>\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item as={Link} to={`/profile/`}\r\n                            text='My Profile' icon='user' />\r\n                        <Dropdown.Item onClick={() => logout()} text='Logout' icon='power' />\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(Navbar);","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\r\n}\r\n\r\nexport default function PrivateRoute({component: Component,...rest} : Props) {\r\n    const {userStore} = useStore();\r\n    \r\n    return(\r\n        <Route\r\n            {...rest} \r\n            render={(props) => userStore.isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n            />\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { IMenuNav } from \"../models/MenuModel\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props {\r\n    currentActive : any\r\n}\r\n\r\n\r\nexport default observer(function SidebarNav({currentActive} : Props) {\r\n    \r\n    const {menuStore : { initialize},userStore} = useStore();\r\n    const menuNav : IMenuNav[] = initialize();\r\n    \r\n    function handleActiveMenu(menuId : string) {\r\n\r\n        if(currentActive[0] === menuId) {\r\n            return \"active\"\r\n        }\r\n        return \"\";\r\n    }\r\n    \r\n    return (\r\n        <Fragment>\r\n\r\n            <div className=\"ui sidebar inverted vertical menu sidebar-menu  labeled icon\" id=\"sidebar\">\r\n                \r\n                {menuNav && \r\n                    menuNav.map(item => ( item.enabled && (\r\n                        <div key={item.key} className={`item ${handleActiveMenu(item.key)}`}>\r\n                            <NavLink to={item.link} className=\"item\">\r\n                                <Icon name={item.icon} size=\"mini\" />\r\n                                {item.title}\r\n                            </NavLink>\r\n                        </div>\r\n                        )\r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment >\r\n    )\r\n});\r\n\r\n\r\n\r\n","\r\nimport {Editor} from \"react-draft-wysiwyg\"\r\nimport {convertToRaw, ContentState,EditorState} from \"draft-js\"\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport htmlToDraft from \"html-to-draftjs\";\r\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\n\r\nimport { useState } from \"react\";\r\n\r\ninterface ITextEditorProps {\r\n    value: string;\r\n    setFieldValue: (val: string) => void;\r\n  }\r\n\r\nexport default function RichEditor({value,setFieldValue} : ITextEditorProps) {\r\n    \r\n  const prepareDraft = (value: string) => {\r\n        const draft = htmlToDraft(value);\r\n        const contentState = ContentState.createFromBlockArray(draft.contentBlocks);\r\n        const editorState = EditorState.createWithContent(contentState);\r\n        return editorState;\r\n      };\r\n\r\n      const [editorState, setEditorState] = useState(\r\n        value ? prepareDraft(value) : EditorState.createEmpty()\r\n      );\r\n    \r\n      const onEditorStateChange = (editorState: EditorState) => {\r\n        const forFormik = draftToHtml(\r\n          convertToRaw(editorState.getCurrentContent())\r\n        );\r\n        setFieldValue(forFormik);\r\n        setEditorState(editorState);\r\n      };\r\n      \r\n    return(\r\n        <Editor \r\n            editorState={editorState} \r\n            wrapperClassName=\"custom-wrapper\"\r\n            editorClassName=\"custom-editor\"\r\n            onEditorStateChange={onEditorStateChange} \r\n            \r\n        />\r\n    )\r\n}","import { Button, Card, DropdownItemProps, Grid } from \"semantic-ui-react\"\r\nimport RichEditor from \"../../../components/Inputs/RichEditor\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik,Form } from \"formik\";\r\nimport { FormikSelect, FormikTextField } from \"../../../components/Inputs/FormInputs\";\r\nimport { ActivityModel, IActivity, IInitialValue } from \"../../../models/CampaignModel\";\r\nimport { useStore } from \"../../../stores/store\";\r\nimport DateInput from \"../../../components/Inputs/DateInput\";\r\n\r\n\r\n\r\ninterface IProps {\r\n    default: IInitialValue,\r\n    activityValue: ActivityModel,\r\n    onSuccess: () => void\r\n}\r\n\r\nexport default function EmailForm(props : IProps) {\r\n    \r\n    const { activityStore } = useStore();\r\n    const history = useHistory();\r\n    \r\n    let groups: DropdownItemProps[] = [];\r\n    let templates: DropdownItemProps[] = [];\r\n\r\n    if(groups.length == 0) {\r\n        props.default.groups\r\n        .forEach((item, index) =>\r\n            groups.push({ key: index, value: item, text: item }));\r\n    }\r\n\r\n    if(templates.length == 0) {\r\n        props.default.templates\r\n        .forEach((item, index) =>\r\n            templates.push({ key: index, value: item.id, text: item.title }));\r\n    }\r\n\r\n   \r\n\r\n    const onSubmitHandler = (value: IActivity) => {\r\n        activityStore.sendEmailAsync(value).then(() => {\r\n            props.onSuccess();\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n        <Formik \r\n            initialValues={props.activityValue}\r\n            onSubmit={values => onSubmitHandler(values)}\r\n        >\r\n            {({setValues,values,dirty}) => (\r\n                <Form className=\"ui form\">\r\n                    <Grid>\r\n                        <Grid.Column width={12}>\r\n                            <Card fluid>\r\n                                <Card.Content style={{height: \"480px\"}}>\r\n                                    <div className=\"one field\">\r\n                                        <FormikTextField name=\"subject\" label=\"Subject\" />\r\n                                    </div>\r\n                                    \r\n                                    <div className=\"one field\">\r\n                                        <RichEditor\r\n                                            setFieldValue={(val) => setValues({...values, body: val})}\r\n                                            value={values.body}  \r\n                                            \r\n                                            />\r\n                                    </div>\r\n                                </Card.Content>\r\n                            </Card>\r\n                            <Card fluid>\r\n                                <Card.Content>\r\n                                    <div className=\"two fields\">\r\n                                        <FormikSelect name=\"toGroup\" label=\"Customer Group\" options={groups} />\r\n                                        <FormikTextField name=\"to\" label=\"Additional Email Address\"/>\r\n                                    </div>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        </Grid.Column>\r\n                        <Grid.Column width={4}>\r\n                            <Card fluid>\r\n                                <Card.Content>\r\n                                    <FormikSelect \r\n                                        name=\"template\" \r\n                                        label=\"Template\" options={templates}\r\n                                        onSelectValueChange={(val : string) => {\r\n\r\n                                            setValues({...values,body: activityStore.getTemplateValue(val).templateHtml})\r\n                                            console.log(activityStore.getTemplateValue(val).templateHtml);\r\n                                        } }\r\n                                    />\r\n                                    <hr/>\r\n                                    <DateInput \r\n                                        placeholderText=\"Send Date\"\r\n                                        name=\"dateToSend\"\r\n                                        dateFormat={\"MMMM d, yyyy \"}\r\n                                    />\r\n                                </Card.Content>\r\n                            </Card>\r\n                            <div className=\"ui grid\">\r\n                                <div className=\"eight wide column\">\r\n                                    <Button positive content=\"Send\" type=\"submit\" disabled={!dirty} fluid />\r\n                                </div>\r\n                                <div className=\"eight wide column\">\r\n                                    <Button negative content=\"Cancel\" type=\"button\"  fluid />\r\n                                </div>\r\n                            </div>\r\n                        </Grid.Column>\r\n\r\n                    </Grid>\r\n                </Form>\r\n\r\n            )}\r\n            \r\n        </Formik>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n   \r\n\r\n","import { Field, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Card, Grid, Header, Icon } from \"semantic-ui-react\";\r\nimport DateInput from \"../../../components/Inputs/DateInput\";\r\nimport { FormikTextField } from \"../../../components/Inputs/FormInputs\";\r\nimport RichEditor from \"../../../components/Inputs/RichEditor\";\r\nimport { ActivityModel, IActivity, IInitialValue } from \"../../../models/CampaignModel\";\r\nimport { useStore } from \"../../../stores/store\";\r\n\r\n\r\n\r\ninterface IProps {\r\n    activityValue: ActivityModel,\r\n    default: IInitialValue,\r\n    onSuccess: () => void\r\n}\r\n\r\nexport default observer(function FacebookForm(props: IProps) {\r\n    const { activityStore } = useStore();\r\n\r\n    const onSubmitHandler = (value: IActivity) => {\r\n       \r\n        activityStore.postSocialasync(value).then(() => {\r\n            props.onSuccess();\r\n        });\r\n    }\r\n    return (\r\n      <Formik\r\n        initialValues={props.activityValue}\r\n        onSubmit={(values) => onSubmitHandler(values)}\r\n      >\r\n        {({ setValues, values, handleChange, dirty }) => (\r\n          <Form className=\"ui form\">\r\n            <Grid>\r\n              <Grid.Column width={12}>\r\n                <Card fluid>\r\n                  <Card.Content style={{ height: \"480px\" }}>\r\n                    <div className=\"one field\">\r\n                      <FormikTextField name=\"title\" label=\"Title\" />\r\n                    </div>\r\n                    <div className=\"one field\">\r\n                        <Field\r\n                          name=\"body\"\r\n                          onChange={handleChange}\r\n                          value={values.body}\r\n                          as=\"textarea\"\r\n                          style={{ marginTop: \"10px\" }}\r\n                        />\r\n                    </div>\r\n                  </Card.Content>\r\n                </Card>\r\n              </Grid.Column>\r\n              <Grid.Column width={4}>\r\n                <Card fluid>\r\n                  <Card.Content>\r\n                    <Header as=\"h4\">\r\n                      <Icon name=\"calendar\" /> Schedule{\" \"}\r\n                    </Header>\r\n                    <DateInput\r\n                      placeholderText=\"Send Date\"\r\n                      name=\"dateToSend\"\r\n                      dateFormat={\"MMMM d, yyyy \"}\r\n                    />\r\n                    <div className=\"ui grid\">\r\n                      <div className=\"eight wide column\">\r\n                        <Button\r\n                          positive\r\n                          content=\"Send\"\r\n                          type=\"submit\"\r\n                          disabled={!dirty}\r\n                          fluid\r\n                        />\r\n                      </div>\r\n                      <div className=\"eight wide column\">\r\n                        <Button negative content=\"Cancel\" type=\"button\" fluid />\r\n                      </div>\r\n                    </div>\r\n                  </Card.Content>\r\n                </Card>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    );\r\n});","import { Field, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Card, DropdownItemProps, Grid, Form as FormPlain, Header, Icon, Segment, Progress } from \"semantic-ui-react\";\r\nimport DateInput from \"../../../components/Inputs/DateInput\";\r\nimport { FormikSelect, FormikTextField } from \"../../../components/Inputs/FormInputs\";\r\nimport { ActivityModel, IActivity, IInitialValue, ITemplates } from \"../../../models/CampaignModel\";\r\nimport { useStore } from \"../../../stores/store\";\r\nimport { useMemo, useState } from \"react\";\r\nimport { ISentimentModel, ISentimentRequest } from \"../../../models/SentimentModel\";\r\n\r\n\r\ninterface Props {\r\n    default: IInitialValue,\r\n    activityValue: ActivityModel,\r\n    onSuccess: () => void\r\n}\r\n\r\nconst populateGroups = (defaultGroups: string[]) : DropdownItemProps[]  => {\r\n        \r\n    let newGroups : DropdownItemProps[] = []; \r\n    \r\n    defaultGroups.forEach((item, index) =>\r\n            newGroups.push({ key: index, value: item, text: item }));\r\n\r\n    return newGroups;\r\n}\r\n\r\nconst populateTemplates = (defaultTemplates: ITemplates[]) => { \r\n    \r\n    let newTemplates : DropdownItemProps[] = [];\r\n\r\n    defaultTemplates\r\n        .forEach((item, index) =>\r\n            newTemplates.push({ key: index, value: item.id, text: item.title }));\r\n\r\n    return newTemplates;\r\n}\r\n\r\nfunction SMSForm(props: Props) {\r\n    \r\n    const { activityStore,campaignStore } = useStore();\r\n    const history = useHistory();\r\n\r\n    const [showSentiment, setShowSentiment] = useState<boolean>(false);\r\n    const [sentiment, setSentiment] = useState<ISentimentModel | undefined>(undefined);\r\n    \r\n    const onSubmitHandler = (activity : IActivity) => {\r\n        activityStore.sendSMSAsync(activity).then(() => {\r\n            props.onSuccess();\r\n        });\r\n    }\r\n    \r\n    let groups: DropdownItemProps[] = useMemo(() => populateGroups(props.default.groups), [props.default.groups || []]);\r\n    let templates: DropdownItemProps[] = useMemo(() => populateTemplates(props.default.templates), [props.default.templates || []]);\r\n\r\n    \r\n\r\n    const handleBlur = (e: any) => {\r\n        const { name, value } = e.target;\r\n        if (name === \"body\") {\r\n            if(value.trim().length > 0) {\r\n                const objValue : ISentimentRequest = {\r\n                    word: value\r\n                };\r\n                campaignStore.getSentimentAsync(objValue).then((resp) => {\r\n                    setSentiment(resp);\r\n                    setShowSentiment(true);\r\n                })\r\n            }else {\r\n                setShowSentiment(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n      <Formik\r\n        initialValues={props.activityValue}\r\n        onSubmit={(values) => {\r\n          onSubmitHandler(values);\r\n        }}\r\n      >\r\n        {({ dirty, handleChange, values, setValues }) => (\r\n          <Form className=\"ui form\">\r\n            <Grid>\r\n              <Grid.Column width={12}>\r\n                <Card fluid>\r\n                  <Card.Content>\r\n                    <div>\r\n                      <FormikTextField name=\"title\" label=\"Title\" type=\"text\" />\r\n                    </div>\r\n                    <div>\r\n                      <FormPlain.Field>\r\n                        <Field\r\n                          name=\"body\"\r\n                          onChange={handleChange}\r\n                          onBlur={handleBlur}\r\n                          value={values.body}\r\n                          as=\"textarea\"\r\n                          style={{ marginTop: \"10px\" }}\r\n                        />\r\n                      </FormPlain.Field>\r\n                    </div>\r\n                  </Card.Content>\r\n                </Card>\r\n                <Card fluid>\r\n                  <Card.Content>\r\n                    <div className=\"two fields\">\r\n                      <FormikSelect\r\n                        name=\"toGroup\"\r\n                        label=\"Customer Group\"\r\n                        options={groups}\r\n                      />\r\n                      <FormikTextField name=\"to\" label=\"Additional Number\" />\r\n                    </div>\r\n                  </Card.Content>\r\n                </Card>\r\n               \r\n              </Grid.Column>\r\n              <Grid.Column width={4}>\r\n                <Card fluid>\r\n                  <Card.Content style={{ minHeight: \"240px\" }}>\r\n                    <Header as=\"h4\">\r\n                      <Icon name=\"calendar\" /> Schedule{\" \"}\r\n                    </Header>\r\n                    <Segment vertical>\r\n                      <DateInput\r\n                        placeholderText=\"Send Date\"\r\n                        name=\"dateToSend\"\r\n                        dateFormat={\"MMMM d, yyyy \"}\r\n                      />\r\n                    </Segment>\r\n                    <Segment vertical>\r\n                      <FormikSelect\r\n                        label=\"Template\"\r\n                        name=\"template\"\r\n                        options={templates}\r\n                        onSelectValueChange={(val: string) => {\r\n                          setValues({\r\n                            ...values,\r\n                            body: activityStore.getTemplateValue(val)\r\n                              .templateHtml,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </Segment>\r\n                    {showSentiment && (\r\n                        <Segment vertical>\r\n                        <div\r\n                            style={{\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            flexDirection: \"row\",\r\n                            gap: \"10px\",\r\n                            }}\r\n                        >\r\n                            <Header as=\"h4\" style={{padding:0,margin:0}}>Sentiment Analysis</Header>\r\n                            <Icon name={sentiment && sentiment.label === 1 ? \"thumbs up outline\" : \"thumbs down outline\"} size=\"big\" />\r\n                        </div>\r\n                        <Progress percent={ sentiment ? sentiment.score[0] * 100 : 0 } success  />\r\n                        <Progress percent={sentiment ? sentiment.score[1] * 100 : 0} error />\r\n                        </Segment>\r\n                    )}\r\n                  </Card.Content>\r\n                </Card>\r\n                <Grid>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={8} textAlign=\"center\">\r\n                      <Button\r\n                        style={{ display: \"blocked\", width: \"100%\" }}\r\n                        positive\r\n                        content=\"Send\"\r\n                        type=\"submit\"\r\n                        disabled={!dirty}\r\n                      />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8} textAlign=\"center\">\r\n                      <Button\r\n                        style={{ display: \"blocked\", width: \"100%\" }}\r\n                        negative\r\n                        content=\"Cancel\"\r\n                        type=\"button\"\r\n                        onClick={() =>\r\n                          history.push(\r\n                            `/activity/${props.activityValue.campaignId}`\r\n                          )\r\n                        }\r\n                      />\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                </Grid>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    );\r\n}\r\n\r\nexport default observer(SMSForm);","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Card, DropdownItem, DropdownItemProps, Grid, Header, Icon, Label } from \"semantic-ui-react\";\r\nimport DateInput from \"../../../components/Inputs/DateInput\";\r\nimport { FormikSelect, FormikTextField, FormikUploadField } from \"../../../components/Inputs/FormInputs\";\r\nimport RichEditor from \"../../../components/Inputs/RichEditor\";\r\nimport { ActivityModel, IActivity, IInitialValue } from \"../../../models/CampaignModel\";\r\nimport { useStore } from \"../../../stores/store\";\r\n\r\n\r\n\r\nconst sectionOptions: DropdownItemProps[] = [\r\n  { key: 1, value: \"hlight\", text: \"Highlight Section\" },\r\n  { key: 1, value: \"side\", text: \"Side Section\" }\r\n]\r\n\r\n\r\ninterface IProps {\r\n  activityValue: ActivityModel,\r\n  default: IInitialValue,\r\n  onSuccess: () => void\r\n}\r\n\r\n\r\n\r\n\r\nexport default observer(function WebPostForm(props: IProps) {\r\n  const { activityStore } = useStore();\r\n\r\n  const onSubmitHandler = (value: IActivity) => {\r\n    activityStore.postWebAsync(value)\r\n      .then(() => props.onSuccess());\r\n  }\r\n\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={props.activityValue}\r\n      onSubmit={onSubmitHandler}\r\n    >\r\n      {({ setValues, values, dirty }) => (\r\n        <Form className=\"ui form\">\r\n          <Grid>\r\n            <Grid.Column width={12}>\r\n              <Card fluid>\r\n                <Card.Content style={{ height: \"480px\" }}>\r\n                  <div className=\"one field\">\r\n                    <FormikTextField name=\"title\" label=\"Title\" />\r\n                  </div>\r\n                  <div className=\"one field\">\r\n                    <RichEditor\r\n                      setFieldValue={(val) => setValues({ ...values, body: val })}\r\n                      value={values.body} />\r\n                  </div>\r\n                </Card.Content>\r\n              </Card>\r\n\r\n              <Grid columns={2}>\r\n                <Grid.Column>\r\n                  <Card fluid>\r\n                    <Card.Content>\r\n                  \r\n                      <FormikUploadField name=\"coverImageFile\"\r\n                        onChange={(e) =>\r\n                          setValues({ ...values, coverImageFile: e.currentTarget.files ? e.currentTarget.files[0] : undefined })\r\n                        }\r\n                      />\r\n\r\n                    </Card.Content>\r\n                  </Card>\r\n\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Card fluid >\r\n                    <Card.Content style={{paddingTop: \"20px\",paddingBottom: \"20px\"}}>\r\n                      <FormikSelect name=\"to\" options={sectionOptions} />\r\n                    </Card.Content>\r\n                  </Card>\r\n                \r\n                </Grid.Column>\r\n              </Grid>\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <Header as=\"h4\"><Icon name=\"calendar\" /> Schedule </Header>\r\n                  <DateInput\r\n                    placeholderText=\"Send Date\"\r\n                    name=\"dateToSend\"\r\n                    dateFormat={\"MMMM d, yyyy \"} />\r\n                  <div className=\"ui grid\">\r\n                    <div className=\"eight wide column\">\r\n                      <Button positive content=\"Send\" type=\"submit\" disabled={!dirty} fluid />\r\n                    </div>\r\n                    <div className=\"eight wide column\">\r\n                      <Button negative content=\"Cancel\" type=\"button\" fluid />\r\n                    </div>\r\n                  </div>\r\n                </Card.Content>\r\n              </Card>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  )\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { ActivityModel } from \"../../../models/CampaignModel\";\r\nimport { useStore } from \"../../../stores/store\";\r\nimport EmailForm from \"./EmailForm\";\r\nimport FacebookForm from \"./FacebookForm\";\r\nimport SMSForm from \"./SMSForm\";\r\nimport WebPostForm from \"./WebPostForm\";\r\n\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    \r\n    const {id,type} = useParams<{id:string,type:string}>();\r\n    const {activityStore} = useStore();\r\n    const history = useHistory();\r\n    \r\n\r\n    useEffect(() => {\r\n        activityStore.initialize(type);\r\n       \r\n    },[id,type,activityStore])\r\n\r\n\r\n    const onSuccess = useCallback(() => {\r\n        history.push(`/activity/${id}`);\r\n    },[id]);\r\n\r\n    const typeObject = (obType: string) => {\r\n        switch(obType) {\r\n            case \"sms\":\r\n                return (\r\n                    <>\r\n                        <Header as='h2'>SMS Activity</Header>\r\n                        <SMSForm default={activityStore.default} \r\n                                onSuccess={onSuccess} \r\n                                activityValue={new ActivityModel(id,type)}  />\r\n                    </>\r\n                )\r\n            case \"email\":\r\n                return(\r\n                    <>\r\n                        <Header as='h2'>Email Activity</Header>\r\n                        <EmailForm default={activityStore.default} \r\n                        onSuccess={onSuccess} \r\n                        activityValue={new ActivityModel(id,type)}/>\r\n                    </>\r\n                )\r\n            case \"web\":\r\n                return(\r\n                    <>\r\n                        <Header as='h2'>Web Post Activity</Header>\r\n                        <WebPostForm \r\n                            default={activityStore.default} \r\n                            activityValue={new ActivityModel(id,type)}\r\n                            onSuccess={onSuccess}\r\n                        />\r\n                    </>\r\n                )\r\n            case \"social\":\r\n                return(\r\n                    <>\r\n                    <Header as='h2'>Facebook Activity</Header>\r\n                    <FacebookForm \r\n                        default={activityStore.default} \r\n                        activityValue={new ActivityModel(id,type)}\r\n                        onSuccess={onSuccess}\r\n                    />\r\n                </>\r\n                )\r\n            default: \r\n                break;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {typeObject(type)}\r\n        </>\r\n    )\r\n\r\n})\r\n\r\n","import { profile } from \"console\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Card, Grid, Image, Table } from \"semantic-ui-react\";\r\nimport { DataTable } from \"../../components/DataTables/DataTable\";\r\nimport Page from \"../../components/Layouts/Page\";\r\nimport { INotification } from \"../../models/NotificationModel\";\r\nimport { UserProfileModel } from \"../../models/User\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\n\r\nexport default observer(function UserProfile() {\r\n\r\n    const [userProfile, setUserProfile] = useState<UserProfileModel>(new UserProfileModel());\r\n    const { userStore: { fetchProfileAsync,updateNotification } } = useStore();\r\n\r\n    useEffect(() => {\r\n        fetchProfileAsync().then(\r\n            (response) => setUserProfile(response)\r\n        );\r\n        //console.log(userProfile);\r\n    }, [fetchProfileAsync])\r\n\r\n    const handleUnread = (id: string) => {\r\n        updateNotification(id).then(() => {\r\n            let notification  = userProfile.notifications.find((item) => item.id == id);\r\n            let notifications = userProfile.notifications.filter((item) => item.id != id);\r\n            if(notification !== undefined) {\r\n                notification.hasRead = true;\r\n                setUserProfile({...userProfile, notifications:[...notifications,notification] })\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Page color=\"yellow\">\r\n            <Page.Header title=\"User Profile\" description=\"\" icon=\"user outline\">\r\n\r\n            </Page.Header>\r\n            <Page.Content>\r\n                <Grid>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={4}>\r\n                            <Image />\r\n\r\n                        </Grid.Column>\r\n                        <Grid.Column width={12}>\r\n                            <Card fluid>\r\n                                <Card.Content>\r\n                                    <div className=\"row-container\">\r\n                                        <div className=\"col\">\r\n                                            <label>Display Name: </label>\r\n                                            <span>{userProfile.displayName}</span>\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row-container\">\r\n                                        <div className=\"col\">\r\n                                            <label>User Name: </label>\r\n                                            <span>{userProfile.username}</span>\r\n                                        </div>\r\n                                        <div className=\"col\">\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </Card.Content>\r\n                            </Card>\r\n\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Grid.Column>\r\n                            <Table>\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell>Notifications</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                {userProfile.notifications.map((notification,index) => (\r\n                                    <Table.Row key={index}>\r\n                                        <Table.Cell>\r\n                                            {!notification.hasRead ? (\r\n                                                <a href=\"#\" onClick={() => handleUnread(notification.id)}>{notification.description}</a>\r\n                                            ) : \r\n                                            (\r\n                                                <span>{notification.description}</span>\r\n                                            )}\r\n                                        </Table.Cell>\r\n                                    </Table.Row>\r\n                                ))}\r\n\r\n                            </Table>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Page.Content>\r\n        </Page>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Switch, useParams } from 'react-router-dom';\r\nimport ActivityDashboard from '../modules/Activity/Dashboard/ActivityDashboard';\r\nimport CampaignDashboard from '../modules/Campaign/CampaignDashboard';\r\nimport ContactDashboard from '../modules/Contacts/ContactDashboard';\r\nimport ContactEntry from '../modules/Contacts/ContactEntry';\r\n\r\nimport PageNotFound from '../modules/NotFound/PageNotFound';\r\nimport SettingDashboard from '../modules/Settings/SettingDashboard';\r\nimport TaskDashboard from '../modules/Task/TaskDashboard';\r\nimport TaskDistribution from '../modules/Task/TaskDistribution';\r\nimport UserDashboard from '../modules/Users/UserDashboard';\r\nimport { useStore } from '../stores/store';\r\nimport Navbar from './Navbar';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport SidebarNav from './SidebarNav';\r\nimport ActivityForm from '../modules/Activity/Forms/ActivityForm';\r\nimport { ToastContainer } from 'react-toast';\r\nimport UserProfile from '../modules/Users/UserProfile';\r\n  \r\n\r\nexport default observer(function AdminRoute() {\r\n    \r\n    const [toggle, setToggle] = useState(false);\r\n    const {userStore : {fetchCurrent,current},commonStore} = useStore();\r\n   \r\n    \r\n    useEffect(() => {\r\n        if(commonStore.token) {\r\n            fetchCurrent().finally(() => commonStore.setAppLoaded());\r\n        }\r\n    },[]);\r\n\r\n\r\n    function handleSidebarToggle() {\r\n        setToggle(toggle ? false : true);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet><style>{\"body {background-color: #eaeaea !important;}\"}</style></Helmet>\r\n            <Navbar onButtonSidebarClick={handleSidebarToggle} />\r\n            <ToastContainer position='bottom-center' />\r\n            <SidebarNav currentActive={useParams()}/>\r\n            <div className=\"pusher\">\r\n                <div className=\"main-content\">\r\n                    <Switch>\r\n                        <PrivateRoute  path={['/contact-create', '/contact/:id']} component={ContactEntry} />\r\n                        <PrivateRoute path='/contact' component={ContactDashboard} />\r\n                        <PrivateRoute path='/campaign' exact component={CampaignDashboard} />\r\n                        <PrivateRoute path='/activity/:id' exact component={ActivityDashboard} />\r\n                        <PrivateRoute path='/activity/:id/:type' component={ActivityForm} />\r\n                        <PrivateRoute path='/task' exact component={TaskDashboard} />\r\n                        <PrivateRoute path='/task/:id' exact component={TaskDistribution} />\r\n                        <PrivateRoute path='/setting' exact component={SettingDashboard} />\r\n                        <PrivateRoute path='/user' exact component={UserDashboard} />\r\n                        <PrivateRoute path='/profile' exact component={UserProfile} />\r\n                        <PrivateRoute component={PageNotFound} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n});","import { Route } from \"react-router-dom\";\r\nimport LoginPage from \"../modules/Home/LoginPage\";\r\nimport AdminRoute from \"./AdminRoute\";\r\n\r\nexport default function Admin() {\r\n   \r\n    return (\r\n        <>\r\n            <Route exact path='/' component={LoginPage} />\r\n            <Route path={'/(.+)'}\r\n                component={AdminRoute}\r\n            />\r\n\r\n        </>\r\n    )\r\n}","import ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './layout/style.css'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport Admin from './layout/Admin';\r\nimport { store, StoreContext } from './stores/store';\r\nimport {createBrowserHistory} from 'history';\r\nimport { ModalProvider } from './components/Modals/ModalContainer';\r\nimport { TaskNotificationProvider } from './components/Notifications/TaskNotificationProvider';\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <BrowserRouter>\r\n    <ModalProvider>\r\n      <TaskNotificationProvider>\r\n        <Admin />\r\n      </TaskNotificationProvider>\r\n    </ModalProvider>\r\n    </BrowserRouter>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}